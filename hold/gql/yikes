import { ApolloLink, HttpLink } from '@apollo/client';
import { TokenRefreshLink } from 'apollo-link-token-refresh';

const authMiddleware = new ApolloLink((operation, forward) => {
  // add the authorization to the headers
  operation.setContext({
    headers: {
      authorization: localStorage.getItem('token') || null
    }
  });

  return forward(operation);
});

const tokenLink = new TokenRefreshLink({
  accessTokenField: 'accessToken',
  isTokenValidOrUndefined: () => {
    const token = getAccessToken();
    if (typeof token === 'string' && !isTokenExpired(token)) {
      return true;
    }
    return false;
  },
  fetchAccessToken: () => {
    return fetch(config.getRefreshTokenRoute(), {
      method: 'POST',
      credentials: 'include'
    });
  },
  handleFetch: accessToken => {
    // if(typeof accessToken !== 'string') return false;
    const accessTokenDecrypted = jwtDecode(accessToken);
    if (typeof accessTokenDecrypted !== 'string') return false;
    setAccessToken(accessTokenDecrypted);
  },
  handleResponse: (operation, accessTokenField) => (response: Response) => {
    console.log(`${response}`);
    console.log(operation);
    console.log(accessTokenField);
    if (response && !response.ok) {
      console.log(response);
    }
  },
  handleError: err => {
    console.error(err);
  }
});

const authLink = setContext((_, { headers }) => {
  const accessToken = getAccessToken();

  return {
    headers: {
      ...headers,
      authorization: accessToken ? `Bearer ${accessToken}` : ''
    }
  };
});

export const composedMiddleware = ApolloLink.from([
  authLink,
  new HttpLink({
    uri: process.env.GRAPHQL_URI,
    credentials: 'include'
  })
]);
