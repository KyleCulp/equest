import postgraphile, { enhanceHttpServerWithSubscriptions } from "postgraphile";
import { Application } from "express";
import { PostgraphileInstance } from "../graphql/postgraphile";
import PgManyToManyPlugin from "@graphile-contrib/pg-many-to-many";
import { pgMasterPool } from "../database";




export const installPostgraphile = async (app: Application) => {
	const { schemas, postgraphileOptions } = PostgraphileInstance;
	// const websocketMiddlewares = app.get("websocketMiddlewares");
	const appendedOptions = {
		...postgraphileOptions,
		// ...websocketMiddlewares,
		graphiqlRoute: "/graphiql",
		// appendPlugins: [
		// 	// Simplifies the field names generated by PostGraphile.
		// 	PgManyToManyPlugin
		// 	// PgSimplifyInflectorPlugin,
		// ],
		// async additionalGraphQLContextFromRequest(req) {
			// const claims = getUserClaimsFromRequest(req);
			// const rootPgPool = app.get("rootPgPool");
			// return {
			// 	claims,
			// 	rootPgPool,
			// 	// user: req.user,
			// 	// Passport.js `login` function, converted to a Promise implementation
			// 	login: user => {
			// 		if (!user) throw new Error("user argument is required");
			// 		return new Promise((resolve, reject) => {
			// 			req.login(user, err => {
			// 				if (err) reject(new Error(err));
			// 				resolve(user);
			// 			});
			// 		});
			// 	},
			// };
		// },
	}

	// Install the PostGraphile middleware
	const postgraphileMiddleware = postgraphile(
		pgMasterPool,
		schemas,
		appendedOptions
	);

	app.use(postgraphileMiddleware);
}