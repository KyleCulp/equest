"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""All input for the create `Meta` mutation."""
input CreateMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Meta` to be created by this mutation."""
  meta: MetaInput!
}

"""The output of our create `Meta` mutation."""
type CreateMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meta` that was created by this mutation."""
  meta: Meta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `StatsPlayer` mutation."""
input CreateStatsPlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StatsPlayer` to be created by this mutation."""
  statsPlayer: StatsPlayerInput!
}

"""The output of our create `StatsPlayer` mutation."""
type CreateStatsPlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StatsPlayer` that was created by this mutation."""
  statsPlayer: StatsPlayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Meta` that is related to this `StatsPlayer`."""
  metaByReplayId: Meta
}

"""All input for the create `StatsTeam` mutation."""
input CreateStatsTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `StatsTeam` to be created by this mutation."""
  statsTeam: StatsTeamInput!
}

"""The output of our create `StatsTeam` mutation."""
type CreateStatsTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StatsTeam` that was created by this mutation."""
  statsTeam: StatsTeam

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Team` mutation."""
input CreateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Team` to be created by this mutation."""
  team: TeamInput!
}

"""The output of our create `Team` mutation."""
type CreateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was created by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `UserAccount` mutation."""
input CreateUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAccount` to be created by this mutation."""
  userAccount: UserAccountInput!
}

"""The output of our create `UserAccount` mutation."""
type CreateUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was created by this mutation."""
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteMetaByReplayId` mutation."""
input DeleteMetaByReplayIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
}

"""All input for the `deleteMeta` mutation."""
input DeleteMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Meta` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Meta` mutation."""
type DeleteMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meta` that was deleted by this mutation."""
  meta: Meta
  deletedMetaId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteStatsPlayerByReplayIdAndPlatformId` mutation."""
input DeleteStatsPlayerByReplayIdAndPlatformIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  platformId: String!
}

"""All input for the `deleteStatsPlayer` mutation."""
input DeleteStatsPlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StatsPlayer` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `StatsPlayer` mutation."""
type DeleteStatsPlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StatsPlayer` that was deleted by this mutation."""
  statsPlayer: StatsPlayer
  deletedStatsPlayerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Meta` that is related to this `StatsPlayer`."""
  metaByReplayId: Meta
}

"""All input for the `deleteStatsTeamByReplayIdAndTeamId` mutation."""
input DeleteStatsTeamByReplayIdAndTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  teamId: String!
}

"""All input for the `deleteStatsTeam` mutation."""
input DeleteStatsTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StatsTeam` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `StatsTeam` mutation."""
type DeleteStatsTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StatsTeam` that was deleted by this mutation."""
  statsTeam: StatsTeam
  deletedStatsTeamId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTeamByTeamId` mutation."""
input DeleteTeamByTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  teamId: String!
}

"""All input for the `deleteTeam` mutation."""
input DeleteTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Team` mutation."""
type DeleteTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was deleted by this mutation."""
  team: Team
  deletedTeamId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteUserAccountByUserId` mutation."""
input DeleteUserAccountByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """A user's unique ID."""
  userId: UUID!
}

"""All input for the `deleteUserAccountByUsername` mutation."""
input DeleteUserAccountByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUserAccount` mutation."""
input DeleteUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAccount` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserAccount` mutation."""
type DeleteUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was deleted by this mutation."""
  userAccount: UserAccount
  deletedUserAccountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

input LoginInput {
  username: String!
  password: String!
}

type LoginPayload {
  user: UserAccount!
}

type Meta implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  name: String
  map: String
  version: Int
  time: Int
  team0Score: Int
  team1Score: Int
  length: BigFloat
  gameServerId: Int
  serverName: String
  matchGuid: String
  teamSize: Int
  playlist: Int
  isOrange: Int
  createdAt: Datetime
  updatedAt: Datetime

  """Reads and enables pagination through a set of `StatsPlayer`."""
  statsPlayersByReplayIdList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `StatsPlayer`."""
    orderBy: [StatsPlayersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsPlayerCondition
  ): [StatsPlayer!]!
}

"""
A condition to be used against `Meta` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MetaCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `Meta`"""
input MetaInput {
  replayId: String!
  name: String
  map: String
  version: Int
  time: Int
  team0Score: Int
  team1Score: Int
  length: BigFloat
  gameServerId: Int
  serverName: String
  matchGuid: String
  teamSize: Int
  playlist: Int
  isOrange: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `Meta`. Fields that are set will be updated."""
input MetaPatch {
  replayId: String
  name: String
  map: String
  version: Int
  time: Int
  team0Score: Int
  team1Score: Int
  length: BigFloat
  gameServerId: Int
  serverName: String
  matchGuid: String
  teamSize: Int
  playlist: Int
  isOrange: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `Meta`."""
enum MetasOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `UserAccount`."""
  createUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAccountInput!
  ): CreateUserAccountPayload

  """Creates a single `Meta`."""
  createMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMetaInput!
  ): CreateMetaPayload

  """Creates a single `StatsPlayer`."""
  createStatsPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStatsPlayerInput!
  ): CreateStatsPlayerPayload

  """Creates a single `StatsTeam`."""
  createStatsTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateStatsTeamInput!
  ): CreateStatsTeamPayload

  """Creates a single `Team`."""
  createTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamInput!
  ): CreateTeamPayload

  """
  Updates a single `UserAccount` using its globally unique id and a patch.
  """
  updateUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountInput!
  ): UpdateUserAccountPayload

  """Updates a single `UserAccount` using a unique key and a patch."""
  updateUserAccountByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountByUserIdInput!
  ): UpdateUserAccountPayload

  """Updates a single `UserAccount` using a unique key and a patch."""
  updateUserAccountByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountByUsernameInput!
  ): UpdateUserAccountPayload

  """Updates a single `Meta` using its globally unique id and a patch."""
  updateMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMetaInput!
  ): UpdateMetaPayload

  """Updates a single `Meta` using a unique key and a patch."""
  updateMetaByReplayId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMetaByReplayIdInput!
  ): UpdateMetaPayload

  """
  Updates a single `StatsPlayer` using its globally unique id and a patch.
  """
  updateStatsPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStatsPlayerInput!
  ): UpdateStatsPlayerPayload

  """Updates a single `StatsPlayer` using a unique key and a patch."""
  updateStatsPlayerByReplayIdAndPlatformId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStatsPlayerByReplayIdAndPlatformIdInput!
  ): UpdateStatsPlayerPayload

  """Updates a single `StatsTeam` using its globally unique id and a patch."""
  updateStatsTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStatsTeamInput!
  ): UpdateStatsTeamPayload

  """Updates a single `StatsTeam` using a unique key and a patch."""
  updateStatsTeamByReplayIdAndTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateStatsTeamByReplayIdAndTeamIdInput!
  ): UpdateStatsTeamPayload

  """Updates a single `Team` using its globally unique id and a patch."""
  updateTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamInput!
  ): UpdateTeamPayload

  """Updates a single `Team` using a unique key and a patch."""
  updateTeamByTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamByTeamIdInput!
  ): UpdateTeamPayload

  """Deletes a single `UserAccount` using its globally unique id."""
  deleteUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountInput!
  ): DeleteUserAccountPayload

  """Deletes a single `UserAccount` using a unique key."""
  deleteUserAccountByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountByUserIdInput!
  ): DeleteUserAccountPayload

  """Deletes a single `UserAccount` using a unique key."""
  deleteUserAccountByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountByUsernameInput!
  ): DeleteUserAccountPayload

  """Deletes a single `Meta` using its globally unique id."""
  deleteMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMetaInput!
  ): DeleteMetaPayload

  """Deletes a single `Meta` using a unique key."""
  deleteMetaByReplayId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMetaByReplayIdInput!
  ): DeleteMetaPayload

  """Deletes a single `StatsPlayer` using its globally unique id."""
  deleteStatsPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStatsPlayerInput!
  ): DeleteStatsPlayerPayload

  """Deletes a single `StatsPlayer` using a unique key."""
  deleteStatsPlayerByReplayIdAndPlatformId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStatsPlayerByReplayIdAndPlatformIdInput!
  ): DeleteStatsPlayerPayload

  """Deletes a single `StatsTeam` using its globally unique id."""
  deleteStatsTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStatsTeamInput!
  ): DeleteStatsTeamPayload

  """Deletes a single `StatsTeam` using a unique key."""
  deleteStatsTeamByReplayIdAndTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteStatsTeamByReplayIdAndTeamIdInput!
  ): DeleteStatsTeamPayload

  """Deletes a single `Team` using its globally unique id."""
  deleteTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamInput!
  ): DeleteTeamPayload

  """Deletes a single `Team` using a unique key."""
  deleteTeamByTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamByTeamIdInput!
  ): DeleteTeamPayload
  registerUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `Meta`."""
  allMetasList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Meta`."""
    orderBy: [MetasOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetaCondition
  ): [Meta!]

  """Reads a set of `StatsPlayer`."""
  allStatsPlayersList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `StatsPlayer`."""
    orderBy: [StatsPlayersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsPlayerCondition
  ): [StatsPlayer!]

  """Reads a set of `StatsTeam`."""
  allStatsTeamsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `StatsTeam`."""
    orderBy: [StatsTeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsTeamCondition
  ): [StatsTeam!]

  """Reads a set of `Team`."""
  allTeamsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): [Team!]
  userAccountByUserId(userId: UUID!): UserAccount
  userAccountByUsername(username: String!): UserAccount
  metaByReplayId(replayId: String!): Meta
  statsPlayerByReplayIdAndPlatformId(replayId: String!, platformId: String!): StatsPlayer
  statsTeamByReplayIdAndTeamId(replayId: String!, teamId: String!): StatsTeam
  teamByTeamId(teamId: String!): Team
  currentPerson: UserAccount

  """Reads a single `UserAccount` using its globally unique `ID`."""
  userAccount(
    """
    The globally unique `ID` to be used in selecting a single `UserAccount`.
    """
    nodeId: ID!
  ): UserAccount

  """Reads a single `Meta` using its globally unique `ID`."""
  meta(
    """The globally unique `ID` to be used in selecting a single `Meta`."""
    nodeId: ID!
  ): Meta

  """Reads a single `StatsPlayer` using its globally unique `ID`."""
  statsPlayer(
    """
    The globally unique `ID` to be used in selecting a single `StatsPlayer`.
    """
    nodeId: ID!
  ): StatsPlayer

  """Reads a single `StatsTeam` using its globally unique `ID`."""
  statsTeam(
    """The globally unique `ID` to be used in selecting a single `StatsTeam`."""
    nodeId: ID!
  ): StatsTeam

  """Reads a single `Team` using its globally unique `ID`."""
  team(
    """The globally unique `ID` to be used in selecting a single `Team`."""
    nodeId: ID!
  ): Team
}

input RegisterInput {
  username: String
  email: String!
  password: String!
}

type RegisterPayload {
  user: UserAccount!
}

"""All input for the `registerUser` mutation."""
input RegisterUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
  email: String!
  password: String!
}

"""The output of our `registerUser` mutation."""
type RegisterUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type StatsPlayer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  platformId: String!
  name: String
  score: Int
  goals: Int
  assists: Int
  saves: Int
  shots: Int
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  wonTurnovers: BigFloat
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
  averageSpeed: BigFloat
  averageHitDistance: BigFloat
  averageDistanceFromCenter: BigFloat
  totalGoals: BigFloat
  totalHits: BigFloat
  totalPasses: BigFloat
  totalDribbles: BigFloat
  totalDribbleConts: BigFloat
  totalAerials: BigFloat
  totalClears: BigFloat
  timeAtSlowSpeed: BigFloat
  timeAtSuperSonic: BigFloat
  timeAtBoostSpeed: BigFloat
  timeInFrontOfCenterOfMass: BigFloat
  timeBehindCenterOfMass: BigFloat
  timeMostForwardPlayer: BigFloat
  timeMostBackPlayer: BigFloat
  timeBetweenPlayers: BigFloat
  pass_: BigFloat
  passed: BigFloat
  dribble: BigFloat
  dribbleContinuation: BigFloat
  shot: BigFloat
  goal: BigFloat
  assist: BigFloat
  assisted: BigFloat
  save: BigFloat
  aerial: BigFloat
  averageDuration: BigFloat
  averageHits: BigFloat
  count: BigFloat
  totalKickoffs: BigFloat
  numTimeBoost: BigFloat
  numTimeCheat: BigFloat
  numTimeGoToBall: BigFloat
  numTimeDefend: BigFloat
  numTimeAfk: BigFloat
  averageBoostUsed: BigFloat
  turnoversOnTheirHalf: BigFloat
  totalSaves: BigFloat
  numTimeFirstTouch: BigFloat
  totalShots: BigFloat
  totalCarries: BigFloat
  totalFlicks: BigFloat
  longestCarry: BigFloat
  furthestCarry: BigFloat
  totalCarryTime: BigFloat
  averageCarryTime: BigFloat
  fastestCarrySpeed: BigFloat
  totalCarryDistance: BigFloat
  averageZDistance: BigFloat
  averageXyDistance: BigFloat
  averageBallZVelocity: BigFloat
  varianceXyDistance: BigFloat
  varianceZDistance: BigFloat
  varianceBallZVelocity: BigFloat
  averageCarrySpeed: BigFloat
  distanceAlongPath: BigFloat

  """Reads a single `Meta` that is related to this `StatsPlayer`."""
  metaByReplayId: Meta
}

"""
A condition to be used against `StatsPlayer` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StatsPlayerCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `StatsPlayer`"""
input StatsPlayerInput {
  replayId: String!
  platformId: String!
  name: String
  score: Int
  goals: Int
  assists: Int
  saves: Int
  shots: Int
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  wonTurnovers: BigFloat
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
  averageSpeed: BigFloat
  averageHitDistance: BigFloat
  averageDistanceFromCenter: BigFloat
  totalGoals: BigFloat
  totalHits: BigFloat
  totalPasses: BigFloat
  totalDribbles: BigFloat
  totalDribbleConts: BigFloat
  totalAerials: BigFloat
  totalClears: BigFloat
  timeAtSlowSpeed: BigFloat
  timeAtSuperSonic: BigFloat
  timeAtBoostSpeed: BigFloat
  timeInFrontOfCenterOfMass: BigFloat
  timeBehindCenterOfMass: BigFloat
  timeMostForwardPlayer: BigFloat
  timeMostBackPlayer: BigFloat
  timeBetweenPlayers: BigFloat
  pass_: BigFloat
  passed: BigFloat
  dribble: BigFloat
  dribbleContinuation: BigFloat
  shot: BigFloat
  goal: BigFloat
  assist: BigFloat
  assisted: BigFloat
  save: BigFloat
  aerial: BigFloat
  averageDuration: BigFloat
  averageHits: BigFloat
  count: BigFloat
  totalKickoffs: BigFloat
  numTimeBoost: BigFloat
  numTimeCheat: BigFloat
  numTimeGoToBall: BigFloat
  numTimeDefend: BigFloat
  numTimeAfk: BigFloat
  averageBoostUsed: BigFloat
  turnoversOnTheirHalf: BigFloat
  totalSaves: BigFloat
  numTimeFirstTouch: BigFloat
  totalShots: BigFloat
  totalCarries: BigFloat
  totalFlicks: BigFloat
  longestCarry: BigFloat
  furthestCarry: BigFloat
  totalCarryTime: BigFloat
  averageCarryTime: BigFloat
  fastestCarrySpeed: BigFloat
  totalCarryDistance: BigFloat
  averageZDistance: BigFloat
  averageXyDistance: BigFloat
  averageBallZVelocity: BigFloat
  varianceXyDistance: BigFloat
  varianceZDistance: BigFloat
  varianceBallZVelocity: BigFloat
  averageCarrySpeed: BigFloat
  distanceAlongPath: BigFloat
}

"""
Represents an update to a `StatsPlayer`. Fields that are set will be updated.
"""
input StatsPlayerPatch {
  replayId: String
  platformId: String
  name: String
  score: Int
  goals: Int
  assists: Int
  saves: Int
  shots: Int
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  wonTurnovers: BigFloat
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
  averageSpeed: BigFloat
  averageHitDistance: BigFloat
  averageDistanceFromCenter: BigFloat
  totalGoals: BigFloat
  totalHits: BigFloat
  totalPasses: BigFloat
  totalDribbles: BigFloat
  totalDribbleConts: BigFloat
  totalAerials: BigFloat
  totalClears: BigFloat
  timeAtSlowSpeed: BigFloat
  timeAtSuperSonic: BigFloat
  timeAtBoostSpeed: BigFloat
  timeInFrontOfCenterOfMass: BigFloat
  timeBehindCenterOfMass: BigFloat
  timeMostForwardPlayer: BigFloat
  timeMostBackPlayer: BigFloat
  timeBetweenPlayers: BigFloat
  pass_: BigFloat
  passed: BigFloat
  dribble: BigFloat
  dribbleContinuation: BigFloat
  shot: BigFloat
  goal: BigFloat
  assist: BigFloat
  assisted: BigFloat
  save: BigFloat
  aerial: BigFloat
  averageDuration: BigFloat
  averageHits: BigFloat
  count: BigFloat
  totalKickoffs: BigFloat
  numTimeBoost: BigFloat
  numTimeCheat: BigFloat
  numTimeGoToBall: BigFloat
  numTimeDefend: BigFloat
  numTimeAfk: BigFloat
  averageBoostUsed: BigFloat
  turnoversOnTheirHalf: BigFloat
  totalSaves: BigFloat
  numTimeFirstTouch: BigFloat
  totalShots: BigFloat
  totalCarries: BigFloat
  totalFlicks: BigFloat
  longestCarry: BigFloat
  furthestCarry: BigFloat
  totalCarryTime: BigFloat
  averageCarryTime: BigFloat
  fastestCarrySpeed: BigFloat
  totalCarryDistance: BigFloat
  averageZDistance: BigFloat
  averageXyDistance: BigFloat
  averageBallZVelocity: BigFloat
  varianceXyDistance: BigFloat
  varianceZDistance: BigFloat
  varianceBallZVelocity: BigFloat
  averageCarrySpeed: BigFloat
  distanceAlongPath: BigFloat
}

"""Methods to use when ordering `StatsPlayer`."""
enum StatsPlayersOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type StatsTeam implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  teamId: String!
  replayId: String!
  name: String
  score: BigFloat
  possession: BigFloat
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
  wonTurnovers: BigFloat
  hitCounts: BigFloat
  totalGoals: BigFloat
  totalHits: BigFloat
  totalPasses: BigFloat
  totalShots: BigFloat
  totalDribbles: BigFloat
  totalDribbleConts: BigFloat
  totalAerials: BigFloat
  totalClears: BigFloat
  totalSaves: BigFloat
  centerOfMass: BigFloat
  positionalTendencies: BigFloat
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
  averageDistanceFromCenter: BigFloat
  averageMaxDistanceFromCenter: BigFloat
  timeClumped: BigFloat
  timeBoondocks: BigFloat
}

"""
A condition to be used against `StatsTeam` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StatsTeamCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `StatsTeam`"""
input StatsTeamInput {
  teamId: String!
  replayId: String!
  name: String
  score: BigFloat
  possession: BigFloat
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
  wonTurnovers: BigFloat
  hitCounts: BigFloat
  totalGoals: BigFloat
  totalHits: BigFloat
  totalPasses: BigFloat
  totalShots: BigFloat
  totalDribbles: BigFloat
  totalDribbleConts: BigFloat
  totalAerials: BigFloat
  totalClears: BigFloat
  totalSaves: BigFloat
  centerOfMass: BigFloat
  positionalTendencies: BigFloat
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
  averageDistanceFromCenter: BigFloat
  averageMaxDistanceFromCenter: BigFloat
  timeClumped: BigFloat
  timeBoondocks: BigFloat
}

"""
Represents an update to a `StatsTeam`. Fields that are set will be updated.
"""
input StatsTeamPatch {
  teamId: String
  replayId: String
  name: String
  score: BigFloat
  possession: BigFloat
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
  wonTurnovers: BigFloat
  hitCounts: BigFloat
  totalGoals: BigFloat
  totalHits: BigFloat
  totalPasses: BigFloat
  totalShots: BigFloat
  totalDribbles: BigFloat
  totalDribbleConts: BigFloat
  totalAerials: BigFloat
  totalClears: BigFloat
  totalSaves: BigFloat
  centerOfMass: BigFloat
  positionalTendencies: BigFloat
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
  averageDistanceFromCenter: BigFloat
  averageMaxDistanceFromCenter: BigFloat
  timeClumped: BigFloat
  timeBoondocks: BigFloat
}

"""Methods to use when ordering `StatsTeam`."""
enum StatsTeamsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `Meta`. (live)"""
  allMetasList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Meta`."""
    orderBy: [MetasOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetaCondition
  ): [Meta!]

  """Reads a set of `StatsPlayer`. (live)"""
  allStatsPlayersList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `StatsPlayer`."""
    orderBy: [StatsPlayersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsPlayerCondition
  ): [StatsPlayer!]

  """Reads a set of `StatsTeam`. (live)"""
  allStatsTeamsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `StatsTeam`."""
    orderBy: [StatsTeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StatsTeamCondition
  ): [StatsTeam!]

  """Reads a set of `Team`. (live)"""
  allTeamsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): [Team!]

  """ (live)"""
  userAccountByUserId(userId: UUID!): UserAccount

  """ (live)"""
  userAccountByUsername(username: String!): UserAccount

  """ (live)"""
  metaByReplayId(replayId: String!): Meta

  """ (live)"""
  statsPlayerByReplayIdAndPlatformId(replayId: String!, platformId: String!): StatsPlayer

  """ (live)"""
  statsTeamByReplayIdAndTeamId(replayId: String!, teamId: String!): StatsTeam

  """ (live)"""
  teamByTeamId(teamId: String!): Team

  """ (live)"""
  currentPerson: UserAccount

  """Reads a single `UserAccount` using its globally unique `ID`. (live)"""
  userAccount(
    """
    The globally unique `ID` to be used in selecting a single `UserAccount`.
    """
    nodeId: ID!
  ): UserAccount

  """Reads a single `Meta` using its globally unique `ID`. (live)"""
  meta(
    """The globally unique `ID` to be used in selecting a single `Meta`."""
    nodeId: ID!
  ): Meta

  """Reads a single `StatsPlayer` using its globally unique `ID`. (live)"""
  statsPlayer(
    """
    The globally unique `ID` to be used in selecting a single `StatsPlayer`.
    """
    nodeId: ID!
  ): StatsPlayer

  """Reads a single `StatsTeam` using its globally unique `ID`. (live)"""
  statsTeam(
    """The globally unique `ID` to be used in selecting a single `StatsTeam`."""
    nodeId: ID!
  ): StatsTeam

  """Reads a single `Team` using its globally unique `ID`. (live)"""
  team(
    """The globally unique `ID` to be used in selecting a single `Team`."""
    nodeId: ID!
  ): Team
}

type Team implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  teamId: String!
  players: [String]
}

"""
A condition to be used against `Team` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
  """Checks for equality with the object’s `teamId` field."""
  teamId: String
}

"""An input for mutations affecting `Team`"""
input TeamInput {
  teamId: String!
  players: [String]
}

"""Represents an update to a `Team`. Fields that are set will be updated."""
input TeamPatch {
  teamId: String
  players: [String]
}

"""Methods to use when ordering `Team`."""
enum TeamsOrderBy {
  NATURAL
  TEAM_ID_ASC
  TEAM_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateMetaByReplayId` mutation."""
input UpdateMetaByReplayIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Meta` being updated.
  """
  metaPatch: MetaPatch!
  replayId: String!
}

"""All input for the `updateMeta` mutation."""
input UpdateMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Meta` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Meta` being updated.
  """
  metaPatch: MetaPatch!
}

"""The output of our update `Meta` mutation."""
type UpdateMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meta` that was updated by this mutation."""
  meta: Meta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateStatsPlayerByReplayIdAndPlatformId` mutation."""
input UpdateStatsPlayerByReplayIdAndPlatformIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StatsPlayer` being updated.
  """
  statsPlayerPatch: StatsPlayerPatch!
  replayId: String!
  platformId: String!
}

"""All input for the `updateStatsPlayer` mutation."""
input UpdateStatsPlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StatsPlayer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StatsPlayer` being updated.
  """
  statsPlayerPatch: StatsPlayerPatch!
}

"""The output of our update `StatsPlayer` mutation."""
type UpdateStatsPlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StatsPlayer` that was updated by this mutation."""
  statsPlayer: StatsPlayer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Meta` that is related to this `StatsPlayer`."""
  metaByReplayId: Meta
}

"""All input for the `updateStatsTeamByReplayIdAndTeamId` mutation."""
input UpdateStatsTeamByReplayIdAndTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `StatsTeam` being updated.
  """
  statsTeamPatch: StatsTeamPatch!
  replayId: String!
  teamId: String!
}

"""All input for the `updateStatsTeam` mutation."""
input UpdateStatsTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `StatsTeam` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `StatsTeam` being updated.
  """
  statsTeamPatch: StatsTeamPatch!
}

"""The output of our update `StatsTeam` mutation."""
type UpdateStatsTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `StatsTeam` that was updated by this mutation."""
  statsTeam: StatsTeam

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTeamByTeamId` mutation."""
input UpdateTeamByTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  teamPatch: TeamPatch!
  teamId: String!
}

"""All input for the `updateTeam` mutation."""
input UpdateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  teamPatch: TeamPatch!
}

"""The output of our update `Team` mutation."""
type UpdateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was updated by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateUserAccountByUserId` mutation."""
input UpdateUserAccountByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  userAccountPatch: UserAccountPatch!

  """A user's unique ID."""
  userId: UUID!
}

"""All input for the `updateUserAccountByUsername` mutation."""
input UpdateUserAccountByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  userAccountPatch: UserAccountPatch!
  username: String!
}

"""All input for the `updateUserAccount` mutation."""
input UpdateUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAccount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  userAccountPatch: UserAccountPatch!
}

"""The output of our update `UserAccount` mutation."""
type UpdateUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was updated by this mutation."""
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A user who can log in to the application."""
type UserAccount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """A user's unique ID."""
  userId: UUID!
  username: String
  roles: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""An input for mutations affecting `UserAccount`"""
input UserAccountInput {
  """A user's unique ID."""
  userId: UUID
  username: String
  roles: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `UserAccount`. Fields that are set will be updated.
"""
input UserAccountPatch {
  """A user's unique ID."""
  userId: UUID
  username: String
  roles: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
