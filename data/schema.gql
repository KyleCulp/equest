type AvgStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  averageSpeed: BigFloat
  averageHitDistance: BigFloat
}

"""
A condition to be used against `AvgStat` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AvgStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `AvgStat`"""
input AvgStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  averageSpeed: BigFloat
  averageHitDistance: BigFloat
}

"""
Represents an update to a `AvgStat`. Fields that are set will be updated.
"""
input AvgStatPatch {
  replayId: String
  playerName: String
  playerId: String
  averageSpeed: BigFloat
  averageHitDistance: BigFloat
}

"""Methods to use when ordering `AvgStat`."""
enum AvgStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type BaseStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  score: Int
  goals: Int
  assists: Int
  saves: Int
  shots: Int
}

"""
A condition to be used against `BaseStat` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BaseStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `BaseStat`"""
input BaseStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  score: Int
  goals: Int
  assists: Int
  saves: Int
  shots: Int
}

"""
Represents an update to a `BaseStat`. Fields that are set will be updated.
"""
input BaseStatPatch {
  replayId: String
  playerName: String
  playerId: String
  score: Int
  goals: Int
  assists: Int
  saves: Int
  shots: Int
}

"""Methods to use when ordering `BaseStat`."""
enum BaseStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type BoostStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  boostUsage: BigFloat
  smallBoosts: BigFloat
  largeBoosts: BigFloat
  wastedCollection: BigFloat
  wastedUsage: BigFloat
  timeFullBoost: BigFloat
  timeLowBoost: BigFloat
  timeNoBoost: BigFloat
  numStolenBoosts: Int
  averageBoostLevel: BigFloat
  wastedBig: BigFloat
  wastedSmall: BigFloat
}

"""
A condition to be used against `BoostStat` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BoostStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `BoostStat`"""
input BoostStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  boostUsage: BigFloat
  smallBoosts: BigFloat
  largeBoosts: BigFloat
  wastedCollection: BigFloat
  wastedUsage: BigFloat
  timeFullBoost: BigFloat
  timeLowBoost: BigFloat
  timeNoBoost: BigFloat
  numStolenBoosts: Int
  averageBoostLevel: BigFloat
  wastedBig: BigFloat
  wastedSmall: BigFloat
}

"""
Represents an update to a `BoostStat`. Fields that are set will be updated.
"""
input BoostStatPatch {
  replayId: String
  playerName: String
  playerId: String
  boostUsage: BigFloat
  smallBoosts: BigFloat
  largeBoosts: BigFloat
  wastedCollection: BigFloat
  wastedUsage: BigFloat
  timeFullBoost: BigFloat
  timeLowBoost: BigFloat
  timeNoBoost: BigFloat
  numStolenBoosts: Int
  averageBoostLevel: BigFloat
  wastedBig: BigFloat
  wastedSmall: BigFloat
}

"""Methods to use when ordering `BoostStat`."""
enum BoostStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `AvgStat` mutation."""
input CreateAvgStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AvgStat` to be created by this mutation."""
  avgStat: AvgStatInput!
}

"""The output of our create `AvgStat` mutation."""
type CreateAvgStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AvgStat` that was created by this mutation."""
  avgStat: AvgStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `BaseStat` mutation."""
input CreateBaseStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BaseStat` to be created by this mutation."""
  baseStat: BaseStatInput!
}

"""The output of our create `BaseStat` mutation."""
type CreateBaseStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BaseStat` that was created by this mutation."""
  baseStat: BaseStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `BoostStat` mutation."""
input CreateBoostStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BoostStat` to be created by this mutation."""
  boostStat: BoostStatInput!
}

"""The output of our create `BoostStat` mutation."""
type CreateBoostStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BoostStat` that was created by this mutation."""
  boostStat: BoostStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createConstraintIfNotExists` mutation."""
input CreateConstraintIfNotExistsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tSchema: String
  tName: String
  cName: String
  constraintSql: String
}

"""The output of our `createConstraintIfNotExists` mutation."""
type CreateConstraintIfNotExistsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `DistanceStat` mutation."""
input CreateDistanceStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DistanceStat` to be created by this mutation."""
  distanceStat: DistanceStatInput!
}

"""The output of our create `DistanceStat` mutation."""
type CreateDistanceStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DistanceStat` that was created by this mutation."""
  distanceStat: DistanceStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GeoDatum` mutation."""
input CreateGeoDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GeoDatum` to be created by this mutation."""
  geoDatum: GeoDatumInput!
}

"""The output of our create `GeoDatum` mutation."""
type CreateGeoDatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GeoDatum` that was created by this mutation."""
  geoDatum: GeoDatum

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `HitCountsStat` mutation."""
input CreateHitCountsStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HitCountsStat` to be created by this mutation."""
  hitCountsStat: HitCountsStatInput!
}

"""The output of our create `HitCountsStat` mutation."""
type CreateHitCountsStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HitCountsStat` that was created by this mutation."""
  hitCountsStat: HitCountsStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Meta` mutation."""
input CreateMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Meta` to be created by this mutation."""
  meta: MetaInput!
}

"""The output of our create `Meta` mutation."""
type CreateMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meta` that was created by this mutation."""
  meta: Meta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Player` mutation."""
input CreatePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Player` to be created by this mutation."""
  player: PlayerInput!
}

"""The output of our create `Player` mutation."""
type CreatePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was created by this mutation."""
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PositionalTendenciesStat` mutation."""
input CreatePositionalTendenciesStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PositionalTendenciesStat` to be created by this mutation."""
  positionalTendenciesStat: PositionalTendenciesStatInput!
}

"""The output of our create `PositionalTendenciesStat` mutation."""
type CreatePositionalTendenciesStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PositionalTendenciesStat` that was created by this mutation."""
  positionalTendenciesStat: PositionalTendenciesStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PossessionStat` mutation."""
input CreatePossessionStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PossessionStat` to be created by this mutation."""
  possessionStat: PossessionStatInput!
}

"""The output of our create `PossessionStat` mutation."""
type CreatePossessionStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PossessionStat` that was created by this mutation."""
  possessionStat: PossessionStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `RelativePosStat` mutation."""
input CreateRelativePosStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RelativePosStat` to be created by this mutation."""
  relativePosStat: RelativePosStatInput!
}

"""The output of our create `RelativePosStat` mutation."""
type CreateRelativePosStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelativePosStat` that was created by this mutation."""
  relativePosStat: RelativePosStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `SpeedStat` mutation."""
input CreateSpeedStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SpeedStat` to be created by this mutation."""
  speedStat: SpeedStatInput!
}

"""The output of our create `SpeedStat` mutation."""
type CreateSpeedStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpeedStat` that was created by this mutation."""
  speedStat: SpeedStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `TeamCentralMass` mutation."""
input CreateTeamCentralMassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TeamCentralMass` to be created by this mutation."""
  teamCentralMass: TeamCentralMassInput!
}

"""The output of our create `TeamCentralMass` mutation."""
type CreateTeamCentralMassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamCentralMass` that was created by this mutation."""
  teamCentralMass: TeamCentralMass

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `TeamHitCount` mutation."""
input CreateTeamHitCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TeamHitCount` to be created by this mutation."""
  teamHitCount: TeamHitCountInput!
}

"""The output of our create `TeamHitCount` mutation."""
type CreateTeamHitCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamHitCount` that was created by this mutation."""
  teamHitCount: TeamHitCount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Team` mutation."""
input CreateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Team` to be created by this mutation."""
  team: TeamInput!
}

"""The output of our create `Team` mutation."""
type CreateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was created by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `TeamPositionalTendency` mutation."""
input CreateTeamPositionalTendencyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TeamPositionalTendency` to be created by this mutation."""
  teamPositionalTendency: TeamPositionalTendencyInput!
}

"""The output of our create `TeamPositionalTendency` mutation."""
type CreateTeamPositionalTendencyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamPositionalTendency` that was created by this mutation."""
  teamPositionalTendency: TeamPositionalTendency

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `TeamPossession` mutation."""
input CreateTeamPossessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TeamPossession` to be created by this mutation."""
  teamPossession: TeamPossessionInput!
}

"""The output of our create `TeamPossession` mutation."""
type CreateTeamPossessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamPossession` that was created by this mutation."""
  teamPossession: TeamPossession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `UserAccount` mutation."""
input CreateUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAccount` to be created by this mutation."""
  userAccount: UserAccountInput!
}

"""The output of our create `UserAccount` mutation."""
type CreateUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was created by this mutation."""
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteAvgStatByReplayIdAndPlayerId` mutation."""
input DeleteAvgStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deleteAvgStat` mutation."""
input DeleteAvgStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AvgStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `AvgStat` mutation."""
type DeleteAvgStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AvgStat` that was deleted by this mutation."""
  avgStat: AvgStat
  deletedAvgStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteBaseStatByReplayIdAndPlayerId` mutation."""
input DeleteBaseStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deleteBaseStat` mutation."""
input DeleteBaseStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BaseStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `BaseStat` mutation."""
type DeleteBaseStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BaseStat` that was deleted by this mutation."""
  baseStat: BaseStat
  deletedBaseStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteBoostStatByReplayIdAndPlayerId` mutation."""
input DeleteBoostStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deleteBoostStat` mutation."""
input DeleteBoostStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BoostStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `BoostStat` mutation."""
type DeleteBoostStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BoostStat` that was deleted by this mutation."""
  boostStat: BoostStat
  deletedBoostStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDistanceStatByReplayIdAndPlayerId` mutation."""
input DeleteDistanceStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deleteDistanceStat` mutation."""
input DeleteDistanceStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DistanceStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `DistanceStat` mutation."""
type DeleteDistanceStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DistanceStat` that was deleted by this mutation."""
  distanceStat: DistanceStat
  deletedDistanceStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteHitCountsStatByReplayIdAndPlayerId` mutation."""
input DeleteHitCountsStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deleteHitCountsStat` mutation."""
input DeleteHitCountsStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HitCountsStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HitCountsStat` mutation."""
type DeleteHitCountsStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HitCountsStat` that was deleted by this mutation."""
  hitCountsStat: HitCountsStat
  deletedHitCountsStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMetaByReplayId` mutation."""
input DeleteMetaByReplayIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
}

"""All input for the `deleteMeta` mutation."""
input DeleteMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Meta` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Meta` mutation."""
type DeleteMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meta` that was deleted by this mutation."""
  meta: Meta
  deletedMetaId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePlayerByPlayerId` mutation."""
input DeletePlayerByPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  playerId: String!
}

"""All input for the `deletePlayer` mutation."""
input DeletePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Player` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Player` mutation."""
type DeletePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was deleted by this mutation."""
  player: Player
  deletedPlayerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deletePositionalTendenciesStatByReplayIdAndPlayerId` mutation.
"""
input DeletePositionalTendenciesStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deletePositionalTendenciesStat` mutation."""
input DeletePositionalTendenciesStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PositionalTendenciesStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PositionalTendenciesStat` mutation."""
type DeletePositionalTendenciesStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PositionalTendenciesStat` that was deleted by this mutation."""
  positionalTendenciesStat: PositionalTendenciesStat
  deletedPositionalTendenciesStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deletePossessionStatByReplayIdAndPlayerId` mutation.
"""
input DeletePossessionStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deletePossessionStat` mutation."""
input DeletePossessionStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PossessionStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PossessionStat` mutation."""
type DeletePossessionStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PossessionStat` that was deleted by this mutation."""
  possessionStat: PossessionStat
  deletedPossessionStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteRelativePosStatByReplayIdAndPlayerId` mutation.
"""
input DeleteRelativePosStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deleteRelativePosStat` mutation."""
input DeleteRelativePosStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RelativePosStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `RelativePosStat` mutation."""
type DeleteRelativePosStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelativePosStat` that was deleted by this mutation."""
  relativePosStat: RelativePosStat
  deletedRelativePosStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSpeedStatByReplayIdAndPlayerId` mutation."""
input DeleteSpeedStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  playerId: String!
}

"""All input for the `deleteSpeedStat` mutation."""
input DeleteSpeedStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpeedStat` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SpeedStat` mutation."""
type DeleteSpeedStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpeedStat` that was deleted by this mutation."""
  speedStat: SpeedStat
  deletedSpeedStatId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTeamByTeamId` mutation."""
input DeleteTeamByTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  teamId: String!
}

"""All input for the `deleteTeamCentralMassByReplayIdAndTeam` mutation."""
input DeleteTeamCentralMassByReplayIdAndTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  team: String!
}

"""All input for the `deleteTeamCentralMass` mutation."""
input DeleteTeamCentralMassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamCentralMass` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TeamCentralMass` mutation."""
type DeleteTeamCentralMassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamCentralMass` that was deleted by this mutation."""
  teamCentralMass: TeamCentralMass
  deletedTeamCentralMassId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTeamHitCountByReplayIdAndTeam` mutation."""
input DeleteTeamHitCountByReplayIdAndTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  team: String!
}

"""All input for the `deleteTeamHitCount` mutation."""
input DeleteTeamHitCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamHitCount` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TeamHitCount` mutation."""
type DeleteTeamHitCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamHitCount` that was deleted by this mutation."""
  teamHitCount: TeamHitCount
  deletedTeamHitCountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTeam` mutation."""
input DeleteTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Team` mutation."""
type DeleteTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was deleted by this mutation."""
  team: Team
  deletedTeamId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteTeamPositionalTendencyByReplayIdAndTeam` mutation.
"""
input DeleteTeamPositionalTendencyByReplayIdAndTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  team: String!
}

"""All input for the `deleteTeamPositionalTendency` mutation."""
input DeleteTeamPositionalTendencyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamPositionalTendency` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TeamPositionalTendency` mutation."""
type DeleteTeamPositionalTendencyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamPositionalTendency` that was deleted by this mutation."""
  teamPositionalTendency: TeamPositionalTendency
  deletedTeamPositionalTendencyId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteTeamPossessionByReplayIdAndTeam` mutation."""
input DeleteTeamPossessionByReplayIdAndTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  team: String!
}

"""All input for the `deleteTeamPossession` mutation."""
input DeleteTeamPossessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamPossession` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TeamPossession` mutation."""
type DeleteTeamPossessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamPossession` that was deleted by this mutation."""
  teamPossession: TeamPossession
  deletedTeamPossessionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteUserAccountByUserId` mutation."""
input DeleteUserAccountByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary unique identifier for a user. Autogenerated."""
  userId: UUID!
}

"""All input for the `deleteUserAccountByUsername` mutation."""
input DeleteUserAccountByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The user’s username. Can be null."""
  username: String!
}

"""All input for the `deleteUserAccount` mutation."""
input DeleteUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAccount` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserAccount` mutation."""
type DeleteUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was deleted by this mutation."""
  userAccount: UserAccount
  deletedUserAccountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type DistanceStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  ballHitForward: BigFloat
  ballHitBackward: BigFloat
  timeClosestToBall: BigFloat
  timeCloseToBall: BigFloat
  timeFurthestFromBall: BigFloat
  timeClosestToTeamCenter: BigFloat
  timeFurthestFromTeamCenter: BigFloat
}

"""
A condition to be used against `DistanceStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DistanceStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `DistanceStat`"""
input DistanceStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  ballHitForward: BigFloat
  ballHitBackward: BigFloat
  timeClosestToBall: BigFloat
  timeCloseToBall: BigFloat
  timeFurthestFromBall: BigFloat
  timeClosestToTeamCenter: BigFloat
  timeFurthestFromTeamCenter: BigFloat
}

"""
Represents an update to a `DistanceStat`. Fields that are set will be updated.
"""
input DistanceStatPatch {
  replayId: String
  playerName: String
  playerId: String
  ballHitForward: BigFloat
  ballHitBackward: BigFloat
  timeClosestToBall: BigFloat
  timeCloseToBall: BigFloat
  timeFurthestFromBall: BigFloat
  timeClosestToTeamCenter: BigFloat
  timeFurthestFromTeamCenter: BigFloat
}

"""Methods to use when ordering `DistanceStat`."""
enum DistanceStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `GeoDatum`."""
enum GeoDataOrderBy {
  NATURAL
}

type GeoDatum {
  replayId: String
  data: JSON
}

"""An input for mutations affecting `GeoDatum`"""
input GeoDatumInput {
  replayId: String
  data: JSON
}

type HitCountsStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  totalHits: BigFloat
  totalPasses: BigFloat
}

"""
A condition to be used against `HitCountsStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HitCountsStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `HitCountsStat`"""
input HitCountsStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  totalHits: BigFloat
  totalPasses: BigFloat
}

"""
Represents an update to a `HitCountsStat`. Fields that are set will be updated.
"""
input HitCountsStatPatch {
  replayId: String
  playerName: String
  playerId: String
  totalHits: BigFloat
  totalPasses: BigFloat
}

"""Methods to use when ordering `HitCountsStat`."""
enum HitCountsStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  username: String!
  password: String!
}

type LoginPayload {
  user: UserAccount!
}

type Meta implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayDate: String!
  replayId: String!
  mapName: String
  serverName: String
  team0Score: Int
  team1Score: Int
  replayLength: String
}

"""
A condition to be used against `Meta` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MetaCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `Meta`"""
input MetaInput {
  replayDate: String!
  replayId: String!
  mapName: String
  serverName: String
  team0Score: Int
  team1Score: Int
  replayLength: String
}

"""Represents an update to a `Meta`. Fields that are set will be updated."""
input MetaPatch {
  replayDate: String
  replayId: String
  mapName: String
  serverName: String
  team0Score: Int
  team1Score: Int
  replayLength: String
}

"""Methods to use when ordering `Meta`."""
enum MetasOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `UserAccount`."""
  createUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAccountInput!
  ): CreateUserAccountPayload

  """Creates a single `AvgStat`."""
  createAvgStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAvgStatInput!
  ): CreateAvgStatPayload

  """Creates a single `BaseStat`."""
  createBaseStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBaseStatInput!
  ): CreateBaseStatPayload

  """Creates a single `BoostStat`."""
  createBoostStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBoostStatInput!
  ): CreateBoostStatPayload

  """Creates a single `DistanceStat`."""
  createDistanceStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDistanceStatInput!
  ): CreateDistanceStatPayload

  """Creates a single `GeoDatum`."""
  createGeoDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGeoDatumInput!
  ): CreateGeoDatumPayload

  """Creates a single `HitCountsStat`."""
  createHitCountsStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHitCountsStatInput!
  ): CreateHitCountsStatPayload

  """Creates a single `Meta`."""
  createMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMetaInput!
  ): CreateMetaPayload

  """Creates a single `Player`."""
  createPlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlayerInput!
  ): CreatePlayerPayload

  """Creates a single `PositionalTendenciesStat`."""
  createPositionalTendenciesStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePositionalTendenciesStatInput!
  ): CreatePositionalTendenciesStatPayload

  """Creates a single `PossessionStat`."""
  createPossessionStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePossessionStatInput!
  ): CreatePossessionStatPayload

  """Creates a single `RelativePosStat`."""
  createRelativePosStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRelativePosStatInput!
  ): CreateRelativePosStatPayload

  """Creates a single `SpeedStat`."""
  createSpeedStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSpeedStatInput!
  ): CreateSpeedStatPayload

  """Creates a single `TeamCentralMass`."""
  createTeamCentralMass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamCentralMassInput!
  ): CreateTeamCentralMassPayload

  """Creates a single `TeamHitCount`."""
  createTeamHitCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamHitCountInput!
  ): CreateTeamHitCountPayload

  """Creates a single `TeamPositionalTendency`."""
  createTeamPositionalTendency(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamPositionalTendencyInput!
  ): CreateTeamPositionalTendencyPayload

  """Creates a single `TeamPossession`."""
  createTeamPossession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamPossessionInput!
  ): CreateTeamPossessionPayload

  """Creates a single `Team`."""
  createTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTeamInput!
  ): CreateTeamPayload

  """
  Updates a single `UserAccount` using its globally unique id and a patch.
  """
  updateUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountInput!
  ): UpdateUserAccountPayload

  """Updates a single `UserAccount` using a unique key and a patch."""
  updateUserAccountByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountByUserIdInput!
  ): UpdateUserAccountPayload

  """Updates a single `UserAccount` using a unique key and a patch."""
  updateUserAccountByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountByUsernameInput!
  ): UpdateUserAccountPayload

  """Updates a single `AvgStat` using its globally unique id and a patch."""
  updateAvgStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAvgStatInput!
  ): UpdateAvgStatPayload

  """Updates a single `AvgStat` using a unique key and a patch."""
  updateAvgStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAvgStatByReplayIdAndPlayerIdInput!
  ): UpdateAvgStatPayload

  """Updates a single `BaseStat` using its globally unique id and a patch."""
  updateBaseStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBaseStatInput!
  ): UpdateBaseStatPayload

  """Updates a single `BaseStat` using a unique key and a patch."""
  updateBaseStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBaseStatByReplayIdAndPlayerIdInput!
  ): UpdateBaseStatPayload

  """Updates a single `BoostStat` using its globally unique id and a patch."""
  updateBoostStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBoostStatInput!
  ): UpdateBoostStatPayload

  """Updates a single `BoostStat` using a unique key and a patch."""
  updateBoostStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBoostStatByReplayIdAndPlayerIdInput!
  ): UpdateBoostStatPayload

  """
  Updates a single `DistanceStat` using its globally unique id and a patch.
  """
  updateDistanceStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDistanceStatInput!
  ): UpdateDistanceStatPayload

  """Updates a single `DistanceStat` using a unique key and a patch."""
  updateDistanceStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDistanceStatByReplayIdAndPlayerIdInput!
  ): UpdateDistanceStatPayload

  """
  Updates a single `HitCountsStat` using its globally unique id and a patch.
  """
  updateHitCountsStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHitCountsStatInput!
  ): UpdateHitCountsStatPayload

  """Updates a single `HitCountsStat` using a unique key and a patch."""
  updateHitCountsStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHitCountsStatByReplayIdAndPlayerIdInput!
  ): UpdateHitCountsStatPayload

  """Updates a single `Meta` using its globally unique id and a patch."""
  updateMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMetaInput!
  ): UpdateMetaPayload

  """Updates a single `Meta` using a unique key and a patch."""
  updateMetaByReplayId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMetaByReplayIdInput!
  ): UpdateMetaPayload

  """Updates a single `Player` using its globally unique id and a patch."""
  updatePlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerInput!
  ): UpdatePlayerPayload

  """Updates a single `Player` using a unique key and a patch."""
  updatePlayerByPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlayerByPlayerIdInput!
  ): UpdatePlayerPayload

  """
  Updates a single `PositionalTendenciesStat` using its globally unique id and a patch.
  """
  updatePositionalTendenciesStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePositionalTendenciesStatInput!
  ): UpdatePositionalTendenciesStatPayload

  """
  Updates a single `PositionalTendenciesStat` using a unique key and a patch.
  """
  updatePositionalTendenciesStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePositionalTendenciesStatByReplayIdAndPlayerIdInput!
  ): UpdatePositionalTendenciesStatPayload

  """
  Updates a single `PossessionStat` using its globally unique id and a patch.
  """
  updatePossessionStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePossessionStatInput!
  ): UpdatePossessionStatPayload

  """Updates a single `PossessionStat` using a unique key and a patch."""
  updatePossessionStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePossessionStatByReplayIdAndPlayerIdInput!
  ): UpdatePossessionStatPayload

  """
  Updates a single `RelativePosStat` using its globally unique id and a patch.
  """
  updateRelativePosStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelativePosStatInput!
  ): UpdateRelativePosStatPayload

  """Updates a single `RelativePosStat` using a unique key and a patch."""
  updateRelativePosStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRelativePosStatByReplayIdAndPlayerIdInput!
  ): UpdateRelativePosStatPayload

  """Updates a single `SpeedStat` using its globally unique id and a patch."""
  updateSpeedStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpeedStatInput!
  ): UpdateSpeedStatPayload

  """Updates a single `SpeedStat` using a unique key and a patch."""
  updateSpeedStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSpeedStatByReplayIdAndPlayerIdInput!
  ): UpdateSpeedStatPayload

  """
  Updates a single `TeamCentralMass` using its globally unique id and a patch.
  """
  updateTeamCentralMass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamCentralMassInput!
  ): UpdateTeamCentralMassPayload

  """Updates a single `TeamCentralMass` using a unique key and a patch."""
  updateTeamCentralMassByReplayIdAndTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamCentralMassByReplayIdAndTeamInput!
  ): UpdateTeamCentralMassPayload

  """
  Updates a single `TeamHitCount` using its globally unique id and a patch.
  """
  updateTeamHitCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamHitCountInput!
  ): UpdateTeamHitCountPayload

  """Updates a single `TeamHitCount` using a unique key and a patch."""
  updateTeamHitCountByReplayIdAndTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamHitCountByReplayIdAndTeamInput!
  ): UpdateTeamHitCountPayload

  """
  Updates a single `TeamPositionalTendency` using its globally unique id and a patch.
  """
  updateTeamPositionalTendency(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamPositionalTendencyInput!
  ): UpdateTeamPositionalTendencyPayload

  """
  Updates a single `TeamPositionalTendency` using a unique key and a patch.
  """
  updateTeamPositionalTendencyByReplayIdAndTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamPositionalTendencyByReplayIdAndTeamInput!
  ): UpdateTeamPositionalTendencyPayload

  """
  Updates a single `TeamPossession` using its globally unique id and a patch.
  """
  updateTeamPossession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamPossessionInput!
  ): UpdateTeamPossessionPayload

  """Updates a single `TeamPossession` using a unique key and a patch."""
  updateTeamPossessionByReplayIdAndTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamPossessionByReplayIdAndTeamInput!
  ): UpdateTeamPossessionPayload

  """Updates a single `Team` using its globally unique id and a patch."""
  updateTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamInput!
  ): UpdateTeamPayload

  """Updates a single `Team` using a unique key and a patch."""
  updateTeamByTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTeamByTeamIdInput!
  ): UpdateTeamPayload

  """Deletes a single `UserAccount` using its globally unique id."""
  deleteUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountInput!
  ): DeleteUserAccountPayload

  """Deletes a single `UserAccount` using a unique key."""
  deleteUserAccountByUserId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountByUserIdInput!
  ): DeleteUserAccountPayload

  """Deletes a single `UserAccount` using a unique key."""
  deleteUserAccountByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountByUsernameInput!
  ): DeleteUserAccountPayload

  """Deletes a single `AvgStat` using its globally unique id."""
  deleteAvgStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAvgStatInput!
  ): DeleteAvgStatPayload

  """Deletes a single `AvgStat` using a unique key."""
  deleteAvgStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAvgStatByReplayIdAndPlayerIdInput!
  ): DeleteAvgStatPayload

  """Deletes a single `BaseStat` using its globally unique id."""
  deleteBaseStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBaseStatInput!
  ): DeleteBaseStatPayload

  """Deletes a single `BaseStat` using a unique key."""
  deleteBaseStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBaseStatByReplayIdAndPlayerIdInput!
  ): DeleteBaseStatPayload

  """Deletes a single `BoostStat` using its globally unique id."""
  deleteBoostStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBoostStatInput!
  ): DeleteBoostStatPayload

  """Deletes a single `BoostStat` using a unique key."""
  deleteBoostStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBoostStatByReplayIdAndPlayerIdInput!
  ): DeleteBoostStatPayload

  """Deletes a single `DistanceStat` using its globally unique id."""
  deleteDistanceStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDistanceStatInput!
  ): DeleteDistanceStatPayload

  """Deletes a single `DistanceStat` using a unique key."""
  deleteDistanceStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDistanceStatByReplayIdAndPlayerIdInput!
  ): DeleteDistanceStatPayload

  """Deletes a single `HitCountsStat` using its globally unique id."""
  deleteHitCountsStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHitCountsStatInput!
  ): DeleteHitCountsStatPayload

  """Deletes a single `HitCountsStat` using a unique key."""
  deleteHitCountsStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHitCountsStatByReplayIdAndPlayerIdInput!
  ): DeleteHitCountsStatPayload

  """Deletes a single `Meta` using its globally unique id."""
  deleteMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMetaInput!
  ): DeleteMetaPayload

  """Deletes a single `Meta` using a unique key."""
  deleteMetaByReplayId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMetaByReplayIdInput!
  ): DeleteMetaPayload

  """Deletes a single `Player` using its globally unique id."""
  deletePlayer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerInput!
  ): DeletePlayerPayload

  """Deletes a single `Player` using a unique key."""
  deletePlayerByPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlayerByPlayerIdInput!
  ): DeletePlayerPayload

  """
  Deletes a single `PositionalTendenciesStat` using its globally unique id.
  """
  deletePositionalTendenciesStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePositionalTendenciesStatInput!
  ): DeletePositionalTendenciesStatPayload

  """Deletes a single `PositionalTendenciesStat` using a unique key."""
  deletePositionalTendenciesStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePositionalTendenciesStatByReplayIdAndPlayerIdInput!
  ): DeletePositionalTendenciesStatPayload

  """Deletes a single `PossessionStat` using its globally unique id."""
  deletePossessionStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePossessionStatInput!
  ): DeletePossessionStatPayload

  """Deletes a single `PossessionStat` using a unique key."""
  deletePossessionStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePossessionStatByReplayIdAndPlayerIdInput!
  ): DeletePossessionStatPayload

  """Deletes a single `RelativePosStat` using its globally unique id."""
  deleteRelativePosStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelativePosStatInput!
  ): DeleteRelativePosStatPayload

  """Deletes a single `RelativePosStat` using a unique key."""
  deleteRelativePosStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRelativePosStatByReplayIdAndPlayerIdInput!
  ): DeleteRelativePosStatPayload

  """Deletes a single `SpeedStat` using its globally unique id."""
  deleteSpeedStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpeedStatInput!
  ): DeleteSpeedStatPayload

  """Deletes a single `SpeedStat` using a unique key."""
  deleteSpeedStatByReplayIdAndPlayerId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSpeedStatByReplayIdAndPlayerIdInput!
  ): DeleteSpeedStatPayload

  """Deletes a single `TeamCentralMass` using its globally unique id."""
  deleteTeamCentralMass(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamCentralMassInput!
  ): DeleteTeamCentralMassPayload

  """Deletes a single `TeamCentralMass` using a unique key."""
  deleteTeamCentralMassByReplayIdAndTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamCentralMassByReplayIdAndTeamInput!
  ): DeleteTeamCentralMassPayload

  """Deletes a single `TeamHitCount` using its globally unique id."""
  deleteTeamHitCount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamHitCountInput!
  ): DeleteTeamHitCountPayload

  """Deletes a single `TeamHitCount` using a unique key."""
  deleteTeamHitCountByReplayIdAndTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamHitCountByReplayIdAndTeamInput!
  ): DeleteTeamHitCountPayload

  """
  Deletes a single `TeamPositionalTendency` using its globally unique id.
  """
  deleteTeamPositionalTendency(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamPositionalTendencyInput!
  ): DeleteTeamPositionalTendencyPayload

  """Deletes a single `TeamPositionalTendency` using a unique key."""
  deleteTeamPositionalTendencyByReplayIdAndTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamPositionalTendencyByReplayIdAndTeamInput!
  ): DeleteTeamPositionalTendencyPayload

  """Deletes a single `TeamPossession` using its globally unique id."""
  deleteTeamPossession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamPossessionInput!
  ): DeleteTeamPossessionPayload

  """Deletes a single `TeamPossession` using a unique key."""
  deleteTeamPossessionByReplayIdAndTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamPossessionByReplayIdAndTeamInput!
  ): DeleteTeamPossessionPayload

  """Deletes a single `Team` using its globally unique id."""
  deleteTeam(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamInput!
  ): DeleteTeamPayload

  """Deletes a single `Team` using a unique key."""
  deleteTeamByTeamId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTeamByTeamIdInput!
  ): DeleteTeamPayload
  createConstraintIfNotExists(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateConstraintIfNotExistsInput!
  ): CreateConstraintIfNotExistsPayload

  """Register`s a user account, with a username."""
  registerUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Player implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  username: String!
  playerId: String!
  appearsIn: [String]
}

"""
A condition to be used against `Player` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PlayerCondition {
  """Checks for equality with the object’s `playerId` field."""
  playerId: String
}

"""An input for mutations affecting `Player`"""
input PlayerInput {
  username: String!
  playerId: String!
  appearsIn: [String]
}

"""
Represents an update to a `Player`. Fields that are set will be updated.
"""
input PlayerPatch {
  username: String
  playerId: String
  appearsIn: [String]
}

"""Methods to use when ordering `Player`."""
enum PlayersOrderBy {
  NATURAL
  PLAYER_ID_ASC
  PLAYER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PositionalTendenciesStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
}

"""
A condition to be used against `PositionalTendenciesStat` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input PositionalTendenciesStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `PositionalTendenciesStat`"""
input PositionalTendenciesStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
}

"""
Represents an update to a `PositionalTendenciesStat`. Fields that are set will be updated.
"""
input PositionalTendenciesStatPatch {
  replayId: String
  playerName: String
  playerId: String
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
}

"""Methods to use when ordering `PositionalTendenciesStat`."""
enum PositionalTendenciesStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PossessionStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
}

"""
A condition to be used against `PossessionStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PossessionStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `PossessionStat`"""
input PossessionStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
}

"""
Represents an update to a `PossessionStat`. Fields that are set will be updated.
"""
input PossessionStatPatch {
  replayId: String
  playerName: String
  playerId: String
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
}

"""Methods to use when ordering `PossessionStat`."""
enum PossessionStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `UserAccount`."""
  allUserAccountsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserAccount`."""
    orderBy: [UserAccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAccountCondition
  ): [UserAccount!]

  """Reads a set of `AvgStat`."""
  allAvgStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AvgStat`."""
    orderBy: [AvgStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AvgStatCondition
  ): [AvgStat!]

  """Reads a set of `BaseStat`."""
  allBaseStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BaseStat`."""
    orderBy: [BaseStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaseStatCondition
  ): [BaseStat!]

  """Reads a set of `BoostStat`."""
  allBoostStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BoostStat`."""
    orderBy: [BoostStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BoostStatCondition
  ): [BoostStat!]

  """Reads a set of `DistanceStat`."""
  allDistanceStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DistanceStat`."""
    orderBy: [DistanceStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DistanceStatCondition
  ): [DistanceStat!]

  """Reads a set of `GeoDatum`."""
  allGeoDataList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GeoDatum`."""
    orderBy: [GeoDataOrderBy!]
  ): [GeoDatum!]

  """Reads a set of `HitCountsStat`."""
  allHitCountsStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `HitCountsStat`."""
    orderBy: [HitCountsStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HitCountsStatCondition
  ): [HitCountsStat!]

  """Reads a set of `Meta`."""
  allMetasList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Meta`."""
    orderBy: [MetasOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetaCondition
  ): [Meta!]

  """Reads a set of `Player`."""
  allPlayersList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerCondition
  ): [Player!]

  """Reads a set of `PositionalTendenciesStat`."""
  allPositionalTendenciesStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PositionalTendenciesStat`."""
    orderBy: [PositionalTendenciesStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PositionalTendenciesStatCondition
  ): [PositionalTendenciesStat!]

  """Reads a set of `PossessionStat`."""
  allPossessionStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PossessionStat`."""
    orderBy: [PossessionStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PossessionStatCondition
  ): [PossessionStat!]

  """Reads a set of `RelativePosStat`."""
  allRelativePosStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `RelativePosStat`."""
    orderBy: [RelativePosStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelativePosStatCondition
  ): [RelativePosStat!]

  """Reads a set of `SpeedStat`."""
  allSpeedStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SpeedStat`."""
    orderBy: [SpeedStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpeedStatCondition
  ): [SpeedStat!]

  """Reads a set of `TeamCentralMass`."""
  allTeamCentralMassesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TeamCentralMass`."""
    orderBy: [TeamCentralMassesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCentralMassCondition
  ): [TeamCentralMass!]

  """Reads a set of `TeamHitCount`."""
  allTeamHitCountsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TeamHitCount`."""
    orderBy: [TeamHitCountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamHitCountCondition
  ): [TeamHitCount!]

  """Reads a set of `TeamPositionalTendency`."""
  allTeamPositionalTendenciesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TeamPositionalTendency`."""
    orderBy: [TeamPositionalTendenciesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamPositionalTendencyCondition
  ): [TeamPositionalTendency!]

  """Reads a set of `TeamPossession`."""
  allTeamPossessionsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TeamPossession`."""
    orderBy: [TeamPossessionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamPossessionCondition
  ): [TeamPossession!]

  """Reads a set of `Team`."""
  allTeamsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): [Team!]
  userAccountByUserId(userId: UUID!): UserAccount
  userAccountByUsername(username: String!): UserAccount
  avgStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): AvgStat
  baseStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): BaseStat
  boostStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): BoostStat
  distanceStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): DistanceStat
  hitCountsStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): HitCountsStat
  metaByReplayId(replayId: String!): Meta
  playerByPlayerId(playerId: String!): Player
  positionalTendenciesStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): PositionalTendenciesStat
  possessionStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): PossessionStat
  relativePosStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): RelativePosStat
  speedStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): SpeedStat
  teamCentralMassByReplayIdAndTeam(replayId: String!, team: String!): TeamCentralMass
  teamHitCountByReplayIdAndTeam(replayId: String!, team: String!): TeamHitCount
  teamPositionalTendencyByReplayIdAndTeam(replayId: String!, team: String!): TeamPositionalTendency
  teamPossessionByReplayIdAndTeam(replayId: String!, team: String!): TeamPossession
  teamByTeamId(teamId: String!): Team

  """Returns the user currently in the session."""
  currentPerson: UserAccount

  """Reads a single `UserAccount` using its globally unique `ID`."""
  userAccount(
    """
    The globally unique `ID` to be used in selecting a single `UserAccount`.
    """
    nodeId: ID!
  ): UserAccount

  """Reads a single `AvgStat` using its globally unique `ID`."""
  avgStat(
    """The globally unique `ID` to be used in selecting a single `AvgStat`."""
    nodeId: ID!
  ): AvgStat

  """Reads a single `BaseStat` using its globally unique `ID`."""
  baseStat(
    """The globally unique `ID` to be used in selecting a single `BaseStat`."""
    nodeId: ID!
  ): BaseStat

  """Reads a single `BoostStat` using its globally unique `ID`."""
  boostStat(
    """The globally unique `ID` to be used in selecting a single `BoostStat`."""
    nodeId: ID!
  ): BoostStat

  """Reads a single `DistanceStat` using its globally unique `ID`."""
  distanceStat(
    """
    The globally unique `ID` to be used in selecting a single `DistanceStat`.
    """
    nodeId: ID!
  ): DistanceStat

  """Reads a single `HitCountsStat` using its globally unique `ID`."""
  hitCountsStat(
    """
    The globally unique `ID` to be used in selecting a single `HitCountsStat`.
    """
    nodeId: ID!
  ): HitCountsStat

  """Reads a single `Meta` using its globally unique `ID`."""
  meta(
    """The globally unique `ID` to be used in selecting a single `Meta`."""
    nodeId: ID!
  ): Meta

  """Reads a single `Player` using its globally unique `ID`."""
  player(
    """The globally unique `ID` to be used in selecting a single `Player`."""
    nodeId: ID!
  ): Player

  """
  Reads a single `PositionalTendenciesStat` using its globally unique `ID`.
  """
  positionalTendenciesStat(
    """
    The globally unique `ID` to be used in selecting a single `PositionalTendenciesStat`.
    """
    nodeId: ID!
  ): PositionalTendenciesStat

  """Reads a single `PossessionStat` using its globally unique `ID`."""
  possessionStat(
    """
    The globally unique `ID` to be used in selecting a single `PossessionStat`.
    """
    nodeId: ID!
  ): PossessionStat

  """Reads a single `RelativePosStat` using its globally unique `ID`."""
  relativePosStat(
    """
    The globally unique `ID` to be used in selecting a single `RelativePosStat`.
    """
    nodeId: ID!
  ): RelativePosStat

  """Reads a single `SpeedStat` using its globally unique `ID`."""
  speedStat(
    """The globally unique `ID` to be used in selecting a single `SpeedStat`."""
    nodeId: ID!
  ): SpeedStat

  """Reads a single `TeamCentralMass` using its globally unique `ID`."""
  teamCentralMass(
    """
    The globally unique `ID` to be used in selecting a single `TeamCentralMass`.
    """
    nodeId: ID!
  ): TeamCentralMass

  """Reads a single `TeamHitCount` using its globally unique `ID`."""
  teamHitCount(
    """
    The globally unique `ID` to be used in selecting a single `TeamHitCount`.
    """
    nodeId: ID!
  ): TeamHitCount

  """
  Reads a single `TeamPositionalTendency` using its globally unique `ID`.
  """
  teamPositionalTendency(
    """
    The globally unique `ID` to be used in selecting a single `TeamPositionalTendency`.
    """
    nodeId: ID!
  ): TeamPositionalTendency

  """Reads a single `TeamPossession` using its globally unique `ID`."""
  teamPossession(
    """
    The globally unique `ID` to be used in selecting a single `TeamPossession`.
    """
    nodeId: ID!
  ): TeamPossession

  """Reads a single `Team` using its globally unique `ID`."""
  team(
    """The globally unique `ID` to be used in selecting a single `Team`."""
    nodeId: ID!
  ): Team
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

type RegisterPayload {
  user: UserAccount!
}

"""All input for the `registerUser` mutation."""
input RegisterUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
  email: String!
  password: String!
}

"""The output of our `registerUser` mutation."""
type RegisterUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type RelativePosStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  timeMostForwardPlayer: BigFloat
  timeMostBackPlayer: BigFloat
  timeBetweenPlayers: BigFloat
}

"""
A condition to be used against `RelativePosStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RelativePosStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `RelativePosStat`"""
input RelativePosStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  timeMostForwardPlayer: BigFloat
  timeMostBackPlayer: BigFloat
  timeBetweenPlayers: BigFloat
}

"""
Represents an update to a `RelativePosStat`. Fields that are set will be updated.
"""
input RelativePosStatPatch {
  replayId: String
  playerName: String
  playerId: String
  timeMostForwardPlayer: BigFloat
  timeMostBackPlayer: BigFloat
  timeBetweenPlayers: BigFloat
}

"""Methods to use when ordering `RelativePosStat`."""
enum RelativePosStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SpeedStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  playerName: String
  playerId: String!
  timeAtSlowSpeed: BigFloat
  timeAtSuperSonic: BigFloat
  timeAtBoostSpeed: BigFloat
}

"""
A condition to be used against `SpeedStat` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SpeedStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `SpeedStat`"""
input SpeedStatInput {
  replayId: String!
  playerName: String
  playerId: String!
  timeAtSlowSpeed: BigFloat
  timeAtSuperSonic: BigFloat
  timeAtBoostSpeed: BigFloat
}

"""
Represents an update to a `SpeedStat`. Fields that are set will be updated.
"""
input SpeedStatPatch {
  replayId: String
  playerName: String
  playerId: String
  timeAtSlowSpeed: BigFloat
  timeAtSuperSonic: BigFloat
  timeAtBoostSpeed: BigFloat
}

"""Methods to use when ordering `SpeedStat`."""
enum SpeedStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `UserAccount`. (live)"""
  allUserAccountsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `UserAccount`."""
    orderBy: [UserAccountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAccountCondition
  ): [UserAccount!]

  """Reads a set of `AvgStat`. (live)"""
  allAvgStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `AvgStat`."""
    orderBy: [AvgStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AvgStatCondition
  ): [AvgStat!]

  """Reads a set of `BaseStat`. (live)"""
  allBaseStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BaseStat`."""
    orderBy: [BaseStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BaseStatCondition
  ): [BaseStat!]

  """Reads a set of `BoostStat`. (live)"""
  allBoostStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `BoostStat`."""
    orderBy: [BoostStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BoostStatCondition
  ): [BoostStat!]

  """Reads a set of `DistanceStat`. (live)"""
  allDistanceStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DistanceStat`."""
    orderBy: [DistanceStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DistanceStatCondition
  ): [DistanceStat!]

  """Reads a set of `GeoDatum`. (live)"""
  allGeoDataList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GeoDatum`."""
    orderBy: [GeoDataOrderBy!]
  ): [GeoDatum!]

  """Reads a set of `HitCountsStat`. (live)"""
  allHitCountsStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `HitCountsStat`."""
    orderBy: [HitCountsStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HitCountsStatCondition
  ): [HitCountsStat!]

  """Reads a set of `Meta`. (live)"""
  allMetasList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Meta`."""
    orderBy: [MetasOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetaCondition
  ): [Meta!]

  """Reads a set of `Player`. (live)"""
  allPlayersList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Player`."""
    orderBy: [PlayersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlayerCondition
  ): [Player!]

  """Reads a set of `PositionalTendenciesStat`. (live)"""
  allPositionalTendenciesStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PositionalTendenciesStat`."""
    orderBy: [PositionalTendenciesStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PositionalTendenciesStatCondition
  ): [PositionalTendenciesStat!]

  """Reads a set of `PossessionStat`. (live)"""
  allPossessionStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PossessionStat`."""
    orderBy: [PossessionStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PossessionStatCondition
  ): [PossessionStat!]

  """Reads a set of `RelativePosStat`. (live)"""
  allRelativePosStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `RelativePosStat`."""
    orderBy: [RelativePosStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RelativePosStatCondition
  ): [RelativePosStat!]

  """Reads a set of `SpeedStat`. (live)"""
  allSpeedStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `SpeedStat`."""
    orderBy: [SpeedStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SpeedStatCondition
  ): [SpeedStat!]

  """Reads a set of `TeamCentralMass`. (live)"""
  allTeamCentralMassesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TeamCentralMass`."""
    orderBy: [TeamCentralMassesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCentralMassCondition
  ): [TeamCentralMass!]

  """Reads a set of `TeamHitCount`. (live)"""
  allTeamHitCountsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TeamHitCount`."""
    orderBy: [TeamHitCountsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamHitCountCondition
  ): [TeamHitCount!]

  """Reads a set of `TeamPositionalTendency`. (live)"""
  allTeamPositionalTendenciesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TeamPositionalTendency`."""
    orderBy: [TeamPositionalTendenciesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamPositionalTendencyCondition
  ): [TeamPositionalTendency!]

  """Reads a set of `TeamPossession`. (live)"""
  allTeamPossessionsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TeamPossession`."""
    orderBy: [TeamPossessionsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamPossessionCondition
  ): [TeamPossession!]

  """Reads a set of `Team`. (live)"""
  allTeamsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Team`."""
    orderBy: [TeamsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TeamCondition
  ): [Team!]

  """ (live)"""
  userAccountByUserId(userId: UUID!): UserAccount

  """ (live)"""
  userAccountByUsername(username: String!): UserAccount

  """ (live)"""
  avgStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): AvgStat

  """ (live)"""
  baseStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): BaseStat

  """ (live)"""
  boostStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): BoostStat

  """ (live)"""
  distanceStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): DistanceStat

  """ (live)"""
  hitCountsStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): HitCountsStat

  """ (live)"""
  metaByReplayId(replayId: String!): Meta

  """ (live)"""
  playerByPlayerId(playerId: String!): Player

  """ (live)"""
  positionalTendenciesStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): PositionalTendenciesStat

  """ (live)"""
  possessionStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): PossessionStat

  """ (live)"""
  relativePosStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): RelativePosStat

  """ (live)"""
  speedStatByReplayIdAndPlayerId(replayId: String!, playerId: String!): SpeedStat

  """ (live)"""
  teamCentralMassByReplayIdAndTeam(replayId: String!, team: String!): TeamCentralMass

  """ (live)"""
  teamHitCountByReplayIdAndTeam(replayId: String!, team: String!): TeamHitCount

  """ (live)"""
  teamPositionalTendencyByReplayIdAndTeam(replayId: String!, team: String!): TeamPositionalTendency

  """ (live)"""
  teamPossessionByReplayIdAndTeam(replayId: String!, team: String!): TeamPossession

  """ (live)"""
  teamByTeamId(teamId: String!): Team

  """Returns the user currently in the session. (live)"""
  currentPerson: UserAccount

  """Reads a single `UserAccount` using its globally unique `ID`. (live)"""
  userAccount(
    """
    The globally unique `ID` to be used in selecting a single `UserAccount`.
    """
    nodeId: ID!
  ): UserAccount

  """Reads a single `AvgStat` using its globally unique `ID`. (live)"""
  avgStat(
    """The globally unique `ID` to be used in selecting a single `AvgStat`."""
    nodeId: ID!
  ): AvgStat

  """Reads a single `BaseStat` using its globally unique `ID`. (live)"""
  baseStat(
    """The globally unique `ID` to be used in selecting a single `BaseStat`."""
    nodeId: ID!
  ): BaseStat

  """Reads a single `BoostStat` using its globally unique `ID`. (live)"""
  boostStat(
    """The globally unique `ID` to be used in selecting a single `BoostStat`."""
    nodeId: ID!
  ): BoostStat

  """Reads a single `DistanceStat` using its globally unique `ID`. (live)"""
  distanceStat(
    """
    The globally unique `ID` to be used in selecting a single `DistanceStat`.
    """
    nodeId: ID!
  ): DistanceStat

  """Reads a single `HitCountsStat` using its globally unique `ID`. (live)"""
  hitCountsStat(
    """
    The globally unique `ID` to be used in selecting a single `HitCountsStat`.
    """
    nodeId: ID!
  ): HitCountsStat

  """Reads a single `Meta` using its globally unique `ID`. (live)"""
  meta(
    """The globally unique `ID` to be used in selecting a single `Meta`."""
    nodeId: ID!
  ): Meta

  """Reads a single `Player` using its globally unique `ID`. (live)"""
  player(
    """The globally unique `ID` to be used in selecting a single `Player`."""
    nodeId: ID!
  ): Player

  """
  Reads a single `PositionalTendenciesStat` using its globally unique `ID`. (live)
  """
  positionalTendenciesStat(
    """
    The globally unique `ID` to be used in selecting a single `PositionalTendenciesStat`.
    """
    nodeId: ID!
  ): PositionalTendenciesStat

  """Reads a single `PossessionStat` using its globally unique `ID`. (live)"""
  possessionStat(
    """
    The globally unique `ID` to be used in selecting a single `PossessionStat`.
    """
    nodeId: ID!
  ): PossessionStat

  """
  Reads a single `RelativePosStat` using its globally unique `ID`. (live)
  """
  relativePosStat(
    """
    The globally unique `ID` to be used in selecting a single `RelativePosStat`.
    """
    nodeId: ID!
  ): RelativePosStat

  """Reads a single `SpeedStat` using its globally unique `ID`. (live)"""
  speedStat(
    """The globally unique `ID` to be used in selecting a single `SpeedStat`."""
    nodeId: ID!
  ): SpeedStat

  """
  Reads a single `TeamCentralMass` using its globally unique `ID`. (live)
  """
  teamCentralMass(
    """
    The globally unique `ID` to be used in selecting a single `TeamCentralMass`.
    """
    nodeId: ID!
  ): TeamCentralMass

  """Reads a single `TeamHitCount` using its globally unique `ID`. (live)"""
  teamHitCount(
    """
    The globally unique `ID` to be used in selecting a single `TeamHitCount`.
    """
    nodeId: ID!
  ): TeamHitCount

  """
  Reads a single `TeamPositionalTendency` using its globally unique `ID`. (live)
  """
  teamPositionalTendency(
    """
    The globally unique `ID` to be used in selecting a single `TeamPositionalTendency`.
    """
    nodeId: ID!
  ): TeamPositionalTendency

  """Reads a single `TeamPossession` using its globally unique `ID`. (live)"""
  teamPossession(
    """
    The globally unique `ID` to be used in selecting a single `TeamPossession`.
    """
    nodeId: ID!
  ): TeamPossession

  """Reads a single `Team` using its globally unique `ID`. (live)"""
  team(
    """The globally unique `ID` to be used in selecting a single `Team`."""
    nodeId: ID!
  ): Team
}

type Team implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  teamId: String!
  players: [String]
}

type TeamCentralMass implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  team: String!
  timeClumped: BigFloat
  timeBoondocks: BigFloat
}

"""
A condition to be used against `TeamCentralMass` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TeamCentralMassCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""Methods to use when ordering `TeamCentralMass`."""
enum TeamCentralMassesOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `TeamCentralMass`"""
input TeamCentralMassInput {
  replayId: String!
  team: String!
  timeClumped: BigFloat
  timeBoondocks: BigFloat
}

"""
Represents an update to a `TeamCentralMass`. Fields that are set will be updated.
"""
input TeamCentralMassPatch {
  replayId: String
  team: String
  timeClumped: BigFloat
  timeBoondocks: BigFloat
}

"""
A condition to be used against `Team` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TeamCondition {
  """Checks for equality with the object’s `teamId` field."""
  teamId: String
}

type TeamHitCount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  team: String!
  totalHits: Int
  totalPasses: Int
  totalSaves: Int
  totalShots: Int
  totalDribbles: Int
  totalAerials: Int
}

"""
A condition to be used against `TeamHitCount` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TeamHitCountCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `TeamHitCount`"""
input TeamHitCountInput {
  replayId: String!
  team: String!
  totalHits: Int
  totalPasses: Int
  totalSaves: Int
  totalShots: Int
  totalDribbles: Int
  totalAerials: Int
}

"""
Represents an update to a `TeamHitCount`. Fields that are set will be updated.
"""
input TeamHitCountPatch {
  replayId: String
  team: String
  totalHits: Int
  totalPasses: Int
  totalSaves: Int
  totalShots: Int
  totalDribbles: Int
  totalAerials: Int
}

"""Methods to use when ordering `TeamHitCount`."""
enum TeamHitCountsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Team`"""
input TeamInput {
  teamId: String!
  players: [String]
}

"""Represents an update to a `Team`. Fields that are set will be updated."""
input TeamPatch {
  teamId: String
  players: [String]
}

"""Methods to use when ordering `TeamPositionalTendency`."""
enum TeamPositionalTendenciesOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TeamPositionalTendency implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  team: String!
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
}

"""
A condition to be used against `TeamPositionalTendency` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TeamPositionalTendencyCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `TeamPositionalTendency`"""
input TeamPositionalTendencyInput {
  replayId: String!
  team: String!
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
}

"""
Represents an update to a `TeamPositionalTendency`. Fields that are set will be updated.
"""
input TeamPositionalTendencyPatch {
  replayId: String
  team: String
  timeOnGround: BigFloat
  timeLowInAir: BigFloat
  timeHighInAir: BigFloat
  timeInDefendingHalf: BigFloat
  timeInAttackingHalf: BigFloat
  timeInDefendingThird: BigFloat
  timeInNeutralThird: BigFloat
  timeInAttackingThird: BigFloat
  timeBehindBall: BigFloat
  timeInFrontBall: BigFloat
  timeNearWall: BigFloat
  timeInCorner: BigFloat
  timeOnWall: BigFloat
}

type TeamPossession implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  team: String!
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
  wonTurnovers: BigFloat
}

"""
A condition to be used against `TeamPossession` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TeamPossessionCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `TeamPossession`"""
input TeamPossessionInput {
  replayId: String!
  team: String!
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
  wonTurnovers: BigFloat
}

"""
Represents an update to a `TeamPossession`. Fields that are set will be updated.
"""
input TeamPossessionPatch {
  replayId: String
  team: String
  possessionTime: BigFloat
  turnovers: BigFloat
  turnoversOnMyHalf: BigFloat
  turnoversOnTheirHalf: BigFloat
  wonTurnovers: BigFloat
}

"""Methods to use when ordering `TeamPossession`."""
enum TeamPossessionsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Team`."""
enum TeamsOrderBy {
  NATURAL
  TEAM_ID_ASC
  TEAM_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateAvgStatByReplayIdAndPlayerId` mutation."""
input UpdateAvgStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AvgStat` being updated.
  """
  avgStatPatch: AvgStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updateAvgStat` mutation."""
input UpdateAvgStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AvgStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AvgStat` being updated.
  """
  avgStatPatch: AvgStatPatch!
}

"""The output of our update `AvgStat` mutation."""
type UpdateAvgStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AvgStat` that was updated by this mutation."""
  avgStat: AvgStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateBaseStatByReplayIdAndPlayerId` mutation."""
input UpdateBaseStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BaseStat` being updated.
  """
  baseStatPatch: BaseStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updateBaseStat` mutation."""
input UpdateBaseStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BaseStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BaseStat` being updated.
  """
  baseStatPatch: BaseStatPatch!
}

"""The output of our update `BaseStat` mutation."""
type UpdateBaseStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BaseStat` that was updated by this mutation."""
  baseStat: BaseStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateBoostStatByReplayIdAndPlayerId` mutation."""
input UpdateBoostStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BoostStat` being updated.
  """
  boostStatPatch: BoostStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updateBoostStat` mutation."""
input UpdateBoostStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BoostStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BoostStat` being updated.
  """
  boostStatPatch: BoostStatPatch!
}

"""The output of our update `BoostStat` mutation."""
type UpdateBoostStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BoostStat` that was updated by this mutation."""
  boostStat: BoostStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateDistanceStatByReplayIdAndPlayerId` mutation."""
input UpdateDistanceStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `DistanceStat` being updated.
  """
  distanceStatPatch: DistanceStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updateDistanceStat` mutation."""
input UpdateDistanceStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DistanceStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DistanceStat` being updated.
  """
  distanceStatPatch: DistanceStatPatch!
}

"""The output of our update `DistanceStat` mutation."""
type UpdateDistanceStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DistanceStat` that was updated by this mutation."""
  distanceStat: DistanceStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateHitCountsStatByReplayIdAndPlayerId` mutation."""
input UpdateHitCountsStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HitCountsStat` being updated.
  """
  hitCountsStatPatch: HitCountsStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updateHitCountsStat` mutation."""
input UpdateHitCountsStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HitCountsStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HitCountsStat` being updated.
  """
  hitCountsStatPatch: HitCountsStatPatch!
}

"""The output of our update `HitCountsStat` mutation."""
type UpdateHitCountsStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HitCountsStat` that was updated by this mutation."""
  hitCountsStat: HitCountsStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMetaByReplayId` mutation."""
input UpdateMetaByReplayIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Meta` being updated.
  """
  metaPatch: MetaPatch!
  replayId: String!
}

"""All input for the `updateMeta` mutation."""
input UpdateMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Meta` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Meta` being updated.
  """
  metaPatch: MetaPatch!
}

"""The output of our update `Meta` mutation."""
type UpdateMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Meta` that was updated by this mutation."""
  meta: Meta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePlayerByPlayerId` mutation."""
input UpdatePlayerByPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  playerPatch: PlayerPatch!
  playerId: String!
}

"""All input for the `updatePlayer` mutation."""
input UpdatePlayerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Player` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Player` being updated.
  """
  playerPatch: PlayerPatch!
}

"""The output of our update `Player` mutation."""
type UpdatePlayerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Player` that was updated by this mutation."""
  player: Player

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updatePositionalTendenciesStatByReplayIdAndPlayerId` mutation.
"""
input UpdatePositionalTendenciesStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PositionalTendenciesStat` being updated.
  """
  positionalTendenciesStatPatch: PositionalTendenciesStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updatePositionalTendenciesStat` mutation."""
input UpdatePositionalTendenciesStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PositionalTendenciesStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PositionalTendenciesStat` being updated.
  """
  positionalTendenciesStatPatch: PositionalTendenciesStatPatch!
}

"""The output of our update `PositionalTendenciesStat` mutation."""
type UpdatePositionalTendenciesStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PositionalTendenciesStat` that was updated by this mutation."""
  positionalTendenciesStat: PositionalTendenciesStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updatePossessionStatByReplayIdAndPlayerId` mutation.
"""
input UpdatePossessionStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PossessionStat` being updated.
  """
  possessionStatPatch: PossessionStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updatePossessionStat` mutation."""
input UpdatePossessionStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PossessionStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PossessionStat` being updated.
  """
  possessionStatPatch: PossessionStatPatch!
}

"""The output of our update `PossessionStat` mutation."""
type UpdatePossessionStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PossessionStat` that was updated by this mutation."""
  possessionStat: PossessionStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateRelativePosStatByReplayIdAndPlayerId` mutation.
"""
input UpdateRelativePosStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RelativePosStat` being updated.
  """
  relativePosStatPatch: RelativePosStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updateRelativePosStat` mutation."""
input UpdateRelativePosStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RelativePosStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RelativePosStat` being updated.
  """
  relativePosStatPatch: RelativePosStatPatch!
}

"""The output of our update `RelativePosStat` mutation."""
type UpdateRelativePosStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `RelativePosStat` that was updated by this mutation."""
  relativePosStat: RelativePosStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSpeedStatByReplayIdAndPlayerId` mutation."""
input UpdateSpeedStatByReplayIdAndPlayerIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SpeedStat` being updated.
  """
  speedStatPatch: SpeedStatPatch!
  replayId: String!
  playerId: String!
}

"""All input for the `updateSpeedStat` mutation."""
input UpdateSpeedStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SpeedStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SpeedStat` being updated.
  """
  speedStatPatch: SpeedStatPatch!
}

"""The output of our update `SpeedStat` mutation."""
type UpdateSpeedStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SpeedStat` that was updated by this mutation."""
  speedStat: SpeedStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTeamByTeamId` mutation."""
input UpdateTeamByTeamIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  teamPatch: TeamPatch!
  teamId: String!
}

"""All input for the `updateTeamCentralMassByReplayIdAndTeam` mutation."""
input UpdateTeamCentralMassByReplayIdAndTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TeamCentralMass` being updated.
  """
  teamCentralMassPatch: TeamCentralMassPatch!
  replayId: String!
  team: String!
}

"""All input for the `updateTeamCentralMass` mutation."""
input UpdateTeamCentralMassInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamCentralMass` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TeamCentralMass` being updated.
  """
  teamCentralMassPatch: TeamCentralMassPatch!
}

"""The output of our update `TeamCentralMass` mutation."""
type UpdateTeamCentralMassPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamCentralMass` that was updated by this mutation."""
  teamCentralMass: TeamCentralMass

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTeamHitCountByReplayIdAndTeam` mutation."""
input UpdateTeamHitCountByReplayIdAndTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TeamHitCount` being updated.
  """
  teamHitCountPatch: TeamHitCountPatch!
  replayId: String!
  team: String!
}

"""All input for the `updateTeamHitCount` mutation."""
input UpdateTeamHitCountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamHitCount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TeamHitCount` being updated.
  """
  teamHitCountPatch: TeamHitCountPatch!
}

"""The output of our update `TeamHitCount` mutation."""
type UpdateTeamHitCountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamHitCount` that was updated by this mutation."""
  teamHitCount: TeamHitCount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTeam` mutation."""
input UpdateTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Team` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Team` being updated.
  """
  teamPatch: TeamPatch!
}

"""The output of our update `Team` mutation."""
type UpdateTeamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Team` that was updated by this mutation."""
  team: Team

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateTeamPositionalTendencyByReplayIdAndTeam` mutation.
"""
input UpdateTeamPositionalTendencyByReplayIdAndTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TeamPositionalTendency` being updated.
  """
  teamPositionalTendencyPatch: TeamPositionalTendencyPatch!
  replayId: String!
  team: String!
}

"""All input for the `updateTeamPositionalTendency` mutation."""
input UpdateTeamPositionalTendencyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamPositionalTendency` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TeamPositionalTendency` being updated.
  """
  teamPositionalTendencyPatch: TeamPositionalTendencyPatch!
}

"""The output of our update `TeamPositionalTendency` mutation."""
type UpdateTeamPositionalTendencyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamPositionalTendency` that was updated by this mutation."""
  teamPositionalTendency: TeamPositionalTendency

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateTeamPossessionByReplayIdAndTeam` mutation."""
input UpdateTeamPossessionByReplayIdAndTeamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TeamPossession` being updated.
  """
  teamPossessionPatch: TeamPossessionPatch!
  replayId: String!
  team: String!
}

"""All input for the `updateTeamPossession` mutation."""
input UpdateTeamPossessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TeamPossession` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TeamPossession` being updated.
  """
  teamPossessionPatch: TeamPossessionPatch!
}

"""The output of our update `TeamPossession` mutation."""
type UpdateTeamPossessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TeamPossession` that was updated by this mutation."""
  teamPossession: TeamPossession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateUserAccountByUserId` mutation."""
input UpdateUserAccountByUserIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  userAccountPatch: UserAccountPatch!

  """Primary unique identifier for a user. Autogenerated."""
  userId: UUID!
}

"""All input for the `updateUserAccountByUsername` mutation."""
input UpdateUserAccountByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  userAccountPatch: UserAccountPatch!

  """The user’s username. Can be null."""
  username: String!
}

"""All input for the `updateUserAccount` mutation."""
input UpdateUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAccount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  userAccountPatch: UserAccountPatch!
}

"""The output of our update `UserAccount` mutation."""
type UpdateUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was updated by this mutation."""
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A user’s core account"""
type UserAccount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Primary unique identifier for a user. Autogenerated."""
  userId: UUID!

  """The user’s username. Can be null."""
  username: String

  """The status of users confirmed email."""
  emailConfirmed: Boolean!

  """The users role."""
  roles: String!

  """The time this person was created."""
  createdAt: Datetime

  """The time this person was last updated."""
  updatedAt: Datetime
}

"""
A condition to be used against `UserAccount` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserAccountCondition {
  """Checks for equality with the object’s `userId` field."""
  userId: UUID

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `UserAccount`"""
input UserAccountInput {
  """Primary unique identifier for a user. Autogenerated."""
  userId: UUID

  """The user’s username. Can be null."""
  username: String

  """The status of users confirmed email."""
  emailConfirmed: Boolean

  """The users role."""
  roles: String

  """The time this person was created."""
  createdAt: Datetime

  """The time this person was last updated."""
  updatedAt: Datetime
}

"""
Represents an update to a `UserAccount`. Fields that are set will be updated.
"""
input UserAccountPatch {
  """Primary unique identifier for a user. Autogenerated."""
  userId: UUID

  """The user’s username. Can be null."""
  username: String

  """The status of users confirmed email."""
  emailConfirmed: Boolean

  """The users role."""
  roles: String

  """The time this person was created."""
  createdAt: Datetime

  """The time this person was last updated."""
  updatedAt: Datetime
}

"""Methods to use when ordering `UserAccount`."""
enum UserAccountsOrderBy {
  NATURAL
  USER_ID_ASC
  USER_ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
