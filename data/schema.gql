"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

type CarballPlayerStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  platformId: String!
  name: String
  titleid: BigFloat
  score: BigFloat
  goals: BigFloat
  assists: BigFloat
  saves: BigFloat
  shots: BigFloat
  camerasettingsStiffness: BigFloat
  camerasettingsHeight: BigFloat
  camerasettingsTransitionspeed: BigFloat
  camerasettingsPitch: BigFloat
  camerasettingsSwivelspeed: BigFloat
  camerasettingsFieldofview: BigFloat
  camerasettingsDistance: BigFloat
  loadoutBanner: BigFloat
  loadoutBoost: BigFloat
  loadoutCar: BigFloat
  loadoutGoalexplosion: BigFloat
  loadoutSkin: BigFloat
  loadoutTrail: BigFloat
  loadoutWheels: BigFloat
  loadoutVersion: BigFloat
  loadoutTopper: BigFloat
  loadoutAntenna: BigFloat
  loadoutEngineaudio: BigFloat
  loadoutGoalexplosionpaint: BigFloat
  loadoutWheelspaint: BigFloat
  loadoutPrimarycolor: BigFloat
  loadoutAccentcolor: BigFloat
  loadoutPrimaryfinish: BigFloat
  loadoutAccentfinish: BigFloat
  loadoutAvatarborderusercolor: BigFloat
  boostusage: BigFloat
  numsmallboosts: BigFloat
  numlargeboosts: BigFloat
  wastedcollection: BigFloat
  wastedusage: BigFloat
  timefullboost: BigFloat
  timelowboost: BigFloat
  timenoboost: BigFloat
  numstolenboosts: BigFloat
  averageboostlevel: BigFloat
  wastedbig: BigFloat
  wastedsmall: BigFloat
  ballhitforward: BigFloat
  ballhitbackward: BigFloat
  timeclosesttoball: BigFloat
  timefurthestfromball: BigFloat
  timeclosetoball: BigFloat
  timeclosesttoteamcenter: BigFloat
  timefurthestfromteamcenter: BigFloat
  possessiontime: BigFloat
  turnovers: BigFloat
  turnoversonmyhalf: BigFloat
  turnoversontheirhalf: BigFloat
  wonturnovers: BigFloat
  timeonground: BigFloat
  timelowinair: BigFloat
  timehighinair: BigFloat
  timeindefendinghalf: BigFloat
  timeinattackinghalf: BigFloat
  timeindefendingthird: BigFloat
  timeinneutralthird: BigFloat
  timeinattackingthird: BigFloat
  timebehindball: BigFloat
  timeinfrontball: BigFloat
  timenearwall: BigFloat
  timeincorner: BigFloat
  timeonwall: BigFloat
  averagespeed: BigFloat
  averagehitdistance: BigFloat
  averagedistancefromcenter: BigFloat
  totalhits: BigFloat
  totalpasses: BigFloat
  totaldribbles: BigFloat
  totaldribbleconts: BigFloat
  totalaerials: BigFloat
  totalclears: BigFloat
  iskeyboard: Boolean
  analoguesteeringinputpercent: BigFloat
  analoguethrottleinputpercent: BigFloat
  timeatslowspeed: BigFloat
  timeatsupersonic: BigFloat
  timeatboostspeed: BigFloat
  timeinfrontofcenterofmass: BigFloat
  timebehindcenterofmass: BigFloat
  timemostforwardplayer: BigFloat
  timemostbackplayer: BigFloat
  timebetweenplayers: BigFloat
  pass: BigFloat
  shot: BigFloat
  goal: BigFloat
  assist: BigFloat
  assisted: BigFloat
  save: BigFloat
  count: BigFloat
  totalcarries: BigFloat
  longestcarry: String
  furthestcarry: String
  totalcarrytime: String
  averagecarrytime: String
  fastestcarryspeed: String
  totalcarrydistance: String
  averagezdistance: String
  averagexydistance: String
  averageballzvelocity: String
  variancexydistance: String
  variancezdistance: String
  varianceballzvelocity: String
  averagecarryspeed: String
  distancealongpath: String
  totalkickoffs: BigFloat
  numtimeboost: BigFloat
  numtimegotoball: BigFloat
  numtimefirsttouch: BigFloat
  averageboostused: String
  isbot: Boolean
  timeingame: String
  firstframeingame: BigFloat
  team: String
}

"""
A condition to be used against `CarballPlayerStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CarballPlayerStatCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `CarballPlayerStat`"""
input CarballPlayerStatInput {
  replayId: String!
  platformId: String!
  name: String
  titleid: BigFloat
  score: BigFloat
  goals: BigFloat
  assists: BigFloat
  saves: BigFloat
  shots: BigFloat
  camerasettingsStiffness: BigFloat
  camerasettingsHeight: BigFloat
  camerasettingsTransitionspeed: BigFloat
  camerasettingsPitch: BigFloat
  camerasettingsSwivelspeed: BigFloat
  camerasettingsFieldofview: BigFloat
  camerasettingsDistance: BigFloat
  loadoutBanner: BigFloat
  loadoutBoost: BigFloat
  loadoutCar: BigFloat
  loadoutGoalexplosion: BigFloat
  loadoutSkin: BigFloat
  loadoutTrail: BigFloat
  loadoutWheels: BigFloat
  loadoutVersion: BigFloat
  loadoutTopper: BigFloat
  loadoutAntenna: BigFloat
  loadoutEngineaudio: BigFloat
  loadoutGoalexplosionpaint: BigFloat
  loadoutWheelspaint: BigFloat
  loadoutPrimarycolor: BigFloat
  loadoutAccentcolor: BigFloat
  loadoutPrimaryfinish: BigFloat
  loadoutAccentfinish: BigFloat
  loadoutAvatarborderusercolor: BigFloat
  boostusage: BigFloat
  numsmallboosts: BigFloat
  numlargeboosts: BigFloat
  wastedcollection: BigFloat
  wastedusage: BigFloat
  timefullboost: BigFloat
  timelowboost: BigFloat
  timenoboost: BigFloat
  numstolenboosts: BigFloat
  averageboostlevel: BigFloat
  wastedbig: BigFloat
  wastedsmall: BigFloat
  ballhitforward: BigFloat
  ballhitbackward: BigFloat
  timeclosesttoball: BigFloat
  timefurthestfromball: BigFloat
  timeclosetoball: BigFloat
  timeclosesttoteamcenter: BigFloat
  timefurthestfromteamcenter: BigFloat
  possessiontime: BigFloat
  turnovers: BigFloat
  turnoversonmyhalf: BigFloat
  turnoversontheirhalf: BigFloat
  wonturnovers: BigFloat
  timeonground: BigFloat
  timelowinair: BigFloat
  timehighinair: BigFloat
  timeindefendinghalf: BigFloat
  timeinattackinghalf: BigFloat
  timeindefendingthird: BigFloat
  timeinneutralthird: BigFloat
  timeinattackingthird: BigFloat
  timebehindball: BigFloat
  timeinfrontball: BigFloat
  timenearwall: BigFloat
  timeincorner: BigFloat
  timeonwall: BigFloat
  averagespeed: BigFloat
  averagehitdistance: BigFloat
  averagedistancefromcenter: BigFloat
  totalhits: BigFloat
  totalpasses: BigFloat
  totaldribbles: BigFloat
  totaldribbleconts: BigFloat
  totalaerials: BigFloat
  totalclears: BigFloat
  iskeyboard: Boolean
  analoguesteeringinputpercent: BigFloat
  analoguethrottleinputpercent: BigFloat
  timeatslowspeed: BigFloat
  timeatsupersonic: BigFloat
  timeatboostspeed: BigFloat
  timeinfrontofcenterofmass: BigFloat
  timebehindcenterofmass: BigFloat
  timemostforwardplayer: BigFloat
  timemostbackplayer: BigFloat
  timebetweenplayers: BigFloat
  pass: BigFloat
  shot: BigFloat
  goal: BigFloat
  assist: BigFloat
  assisted: BigFloat
  save: BigFloat
  count: BigFloat
  totalcarries: BigFloat
  longestcarry: String
  furthestcarry: String
  totalcarrytime: String
  averagecarrytime: String
  fastestcarryspeed: String
  totalcarrydistance: String
  averagezdistance: String
  averagexydistance: String
  averageballzvelocity: String
  variancexydistance: String
  variancezdistance: String
  varianceballzvelocity: String
  averagecarryspeed: String
  distancealongpath: String
  totalkickoffs: BigFloat
  numtimeboost: BigFloat
  numtimegotoball: BigFloat
  numtimefirsttouch: BigFloat
  averageboostused: String
  isbot: Boolean
  timeingame: String
  firstframeingame: BigFloat
  team: String
}

"""
Represents an update to a `CarballPlayerStat`. Fields that are set will be updated.
"""
input CarballPlayerStatPatch {
  replayId: String
  platformId: String
  name: String
  titleid: BigFloat
  score: BigFloat
  goals: BigFloat
  assists: BigFloat
  saves: BigFloat
  shots: BigFloat
  camerasettingsStiffness: BigFloat
  camerasettingsHeight: BigFloat
  camerasettingsTransitionspeed: BigFloat
  camerasettingsPitch: BigFloat
  camerasettingsSwivelspeed: BigFloat
  camerasettingsFieldofview: BigFloat
  camerasettingsDistance: BigFloat
  loadoutBanner: BigFloat
  loadoutBoost: BigFloat
  loadoutCar: BigFloat
  loadoutGoalexplosion: BigFloat
  loadoutSkin: BigFloat
  loadoutTrail: BigFloat
  loadoutWheels: BigFloat
  loadoutVersion: BigFloat
  loadoutTopper: BigFloat
  loadoutAntenna: BigFloat
  loadoutEngineaudio: BigFloat
  loadoutGoalexplosionpaint: BigFloat
  loadoutWheelspaint: BigFloat
  loadoutPrimarycolor: BigFloat
  loadoutAccentcolor: BigFloat
  loadoutPrimaryfinish: BigFloat
  loadoutAccentfinish: BigFloat
  loadoutAvatarborderusercolor: BigFloat
  boostusage: BigFloat
  numsmallboosts: BigFloat
  numlargeboosts: BigFloat
  wastedcollection: BigFloat
  wastedusage: BigFloat
  timefullboost: BigFloat
  timelowboost: BigFloat
  timenoboost: BigFloat
  numstolenboosts: BigFloat
  averageboostlevel: BigFloat
  wastedbig: BigFloat
  wastedsmall: BigFloat
  ballhitforward: BigFloat
  ballhitbackward: BigFloat
  timeclosesttoball: BigFloat
  timefurthestfromball: BigFloat
  timeclosetoball: BigFloat
  timeclosesttoteamcenter: BigFloat
  timefurthestfromteamcenter: BigFloat
  possessiontime: BigFloat
  turnovers: BigFloat
  turnoversonmyhalf: BigFloat
  turnoversontheirhalf: BigFloat
  wonturnovers: BigFloat
  timeonground: BigFloat
  timelowinair: BigFloat
  timehighinair: BigFloat
  timeindefendinghalf: BigFloat
  timeinattackinghalf: BigFloat
  timeindefendingthird: BigFloat
  timeinneutralthird: BigFloat
  timeinattackingthird: BigFloat
  timebehindball: BigFloat
  timeinfrontball: BigFloat
  timenearwall: BigFloat
  timeincorner: BigFloat
  timeonwall: BigFloat
  averagespeed: BigFloat
  averagehitdistance: BigFloat
  averagedistancefromcenter: BigFloat
  totalhits: BigFloat
  totalpasses: BigFloat
  totaldribbles: BigFloat
  totaldribbleconts: BigFloat
  totalaerials: BigFloat
  totalclears: BigFloat
  iskeyboard: Boolean
  analoguesteeringinputpercent: BigFloat
  analoguethrottleinputpercent: BigFloat
  timeatslowspeed: BigFloat
  timeatsupersonic: BigFloat
  timeatboostspeed: BigFloat
  timeinfrontofcenterofmass: BigFloat
  timebehindcenterofmass: BigFloat
  timemostforwardplayer: BigFloat
  timemostbackplayer: BigFloat
  timebetweenplayers: BigFloat
  pass: BigFloat
  shot: BigFloat
  goal: BigFloat
  assist: BigFloat
  assisted: BigFloat
  save: BigFloat
  count: BigFloat
  totalcarries: BigFloat
  longestcarry: String
  furthestcarry: String
  totalcarrytime: String
  averagecarrytime: String
  fastestcarryspeed: String
  totalcarrydistance: String
  averagezdistance: String
  averagexydistance: String
  averageballzvelocity: String
  variancexydistance: String
  variancezdistance: String
  varianceballzvelocity: String
  averagecarryspeed: String
  distancealongpath: String
  totalkickoffs: BigFloat
  numtimeboost: BigFloat
  numtimegotoball: BigFloat
  numtimefirsttouch: BigFloat
  averageboostused: String
  isbot: Boolean
  timeingame: String
  firstframeingame: BigFloat
  team: String
}

"""Methods to use when ordering `CarballPlayerStat`."""
enum CarballPlayerStatsOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CarballReplayMeta implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  replayId: String!
  name: String
  map: String
  version: Int
  time: String
  frames: Int
  goals: [JSON]
  demos: [JSON]
  primaryplayer: String
  length: BigFloat
  servername: String
  gameserverid: String
  matchguid: String
  playlist: String
  teamSize: Int
  team0Score: Int
  team1Score: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A condition to be used against `CarballReplayMeta` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CarballReplayMetaCondition {
  """Checks for equality with the object’s `replayId` field."""
  replayId: String
}

"""An input for mutations affecting `CarballReplayMeta`"""
input CarballReplayMetaInput {
  replayId: String!
  name: String
  map: String
  version: Int
  time: String
  frames: Int
  goals: [JSON]
  demos: [JSON]
  primaryplayer: String
  length: BigFloat
  servername: String
  gameserverid: String
  matchguid: String
  playlist: String
  teamSize: Int
  team0Score: Int
  team1Score: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `CarballReplayMeta`. Fields that are set will be updated.
"""
input CarballReplayMetaPatch {
  replayId: String
  name: String
  map: String
  version: Int
  time: String
  frames: Int
  goals: [JSON]
  demos: [JSON]
  primaryplayer: String
  length: BigFloat
  servername: String
  gameserverid: String
  matchguid: String
  playlist: String
  teamSize: Int
  team0Score: Int
  team1Score: Int
  createdAt: Datetime
  updatedAt: Datetime
}

"""Methods to use when ordering `CarballReplayMeta`."""
enum CarballReplayMetasOrderBy {
  NATURAL
  REPLAY_ID_ASC
  REPLAY_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `CarballPlayerStat` mutation."""
input CreateCarballPlayerStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CarballPlayerStat` to be created by this mutation."""
  carballPlayerStat: CarballPlayerStatInput!
}

"""The output of our create `CarballPlayerStat` mutation."""
type CreateCarballPlayerStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CarballPlayerStat` that was created by this mutation."""
  carballPlayerStat: CarballPlayerStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CarballReplayMeta` mutation."""
input CreateCarballReplayMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CarballReplayMeta` to be created by this mutation."""
  carballReplayMeta: CarballReplayMetaInput!
}

"""The output of our create `CarballReplayMeta` mutation."""
type CreateCarballReplayMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CarballReplayMeta` that was created by this mutation."""
  carballReplayMeta: CarballReplayMeta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `UserAccount` mutation."""
input CreateUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserAccount` to be created by this mutation."""
  userAccount: UserAccountInput!
}

"""The output of our create `UserAccount` mutation."""
type CreateUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was created by this mutation."""
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteCarballPlayerStatByNodeId` mutation."""
input DeleteCarballPlayerStatByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarballPlayerStat` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCarballPlayerStat` mutation."""
input DeleteCarballPlayerStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
  platformId: String!
}

"""The output of our delete `CarballPlayerStat` mutation."""
type DeleteCarballPlayerStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CarballPlayerStat` that was deleted by this mutation."""
  carballPlayerStat: CarballPlayerStat
  deletedCarballPlayerStatNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCarballReplayMetaByNodeId` mutation."""
input DeleteCarballReplayMetaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarballReplayMeta` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCarballReplayMeta` mutation."""
input DeleteCarballReplayMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  replayId: String!
}

"""The output of our delete `CarballReplayMeta` mutation."""
type DeleteCarballReplayMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CarballReplayMeta` that was deleted by this mutation."""
  carballReplayMeta: CarballReplayMeta
  deletedCarballReplayMetaNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteUserAccountByNodeId` mutation."""
input DeleteUserAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAccount` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserAccountByUsername` mutation."""
input DeleteUserAccountByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUserAccount` mutation."""
input DeleteUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """A user's unique ID."""
  userId: UUID!
}

"""The output of our delete `UserAccount` mutation."""
type DeleteUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was deleted by this mutation."""
  userAccount: UserAccount
  deletedUserAccountNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  username: String!
  password: String!
}

type LoginPayload {
  user: UserAccount!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `UserAccount`."""
  createUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserAccountInput!
  ): CreateUserAccountPayload

  """Creates a single `CarballPlayerStat`."""
  createCarballPlayerStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCarballPlayerStatInput!
  ): CreateCarballPlayerStatPayload

  """Creates a single `CarballReplayMeta`."""
  createCarballReplayMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCarballReplayMetaInput!
  ): CreateCarballReplayMetaPayload

  """
  Updates a single `UserAccount` using its globally unique id and a patch.
  """
  updateUserAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountByNodeIdInput!
  ): UpdateUserAccountPayload

  """Updates a single `UserAccount` using a unique key and a patch."""
  updateUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountInput!
  ): UpdateUserAccountPayload

  """Updates a single `UserAccount` using a unique key and a patch."""
  updateUserAccountByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserAccountByUsernameInput!
  ): UpdateUserAccountPayload

  """
  Updates a single `CarballPlayerStat` using its globally unique id and a patch.
  """
  updateCarballPlayerStatByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarballPlayerStatByNodeIdInput!
  ): UpdateCarballPlayerStatPayload

  """Updates a single `CarballPlayerStat` using a unique key and a patch."""
  updateCarballPlayerStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarballPlayerStatInput!
  ): UpdateCarballPlayerStatPayload

  """
  Updates a single `CarballReplayMeta` using its globally unique id and a patch.
  """
  updateCarballReplayMetaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarballReplayMetaByNodeIdInput!
  ): UpdateCarballReplayMetaPayload

  """Updates a single `CarballReplayMeta` using a unique key and a patch."""
  updateCarballReplayMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCarballReplayMetaInput!
  ): UpdateCarballReplayMetaPayload

  """Deletes a single `UserAccount` using its globally unique id."""
  deleteUserAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountByNodeIdInput!
  ): DeleteUserAccountPayload

  """Deletes a single `UserAccount` using a unique key."""
  deleteUserAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountInput!
  ): DeleteUserAccountPayload

  """Deletes a single `UserAccount` using a unique key."""
  deleteUserAccountByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserAccountByUsernameInput!
  ): DeleteUserAccountPayload

  """Deletes a single `CarballPlayerStat` using its globally unique id."""
  deleteCarballPlayerStatByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarballPlayerStatByNodeIdInput!
  ): DeleteCarballPlayerStatPayload

  """Deletes a single `CarballPlayerStat` using a unique key."""
  deleteCarballPlayerStat(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarballPlayerStatInput!
  ): DeleteCarballPlayerStatPayload

  """Deletes a single `CarballReplayMeta` using its globally unique id."""
  deleteCarballReplayMetaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarballReplayMetaByNodeIdInput!
  ): DeleteCarballReplayMetaPayload

  """Deletes a single `CarballReplayMeta` using a unique key."""
  deleteCarballReplayMeta(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCarballReplayMetaInput!
  ): DeleteCarballReplayMetaPayload
  registerUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterUserInput!
  ): RegisterUserPayload
  register(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterInput!
  ): RegisterPayload
  login(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: LoginInput!
  ): LoginPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `CarballPlayerStat`."""
  carballPlayerStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CarballPlayerStat`."""
    orderBy: [CarballPlayerStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CarballPlayerStatCondition
  ): [CarballPlayerStat!]

  """Reads a set of `CarballReplayMeta`."""
  carballReplayMetasList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CarballReplayMeta`."""
    orderBy: [CarballReplayMetasOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CarballReplayMetaCondition
  ): [CarballReplayMeta!]
  userAccount(userId: UUID!): UserAccount
  userAccountByUsername(username: String!): UserAccount
  carballPlayerStat(replayId: String!, platformId: String!): CarballPlayerStat
  carballReplayMeta(replayId: String!): CarballReplayMeta
  canAccessSchema(schemarole: String): Boolean
  currentPerson: UserAccount

  """Reads a single `UserAccount` using its globally unique `ID`."""
  userAccountByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAccount`.
    """
    nodeId: ID!
  ): UserAccount

  """Reads a single `CarballPlayerStat` using its globally unique `ID`."""
  carballPlayerStatByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CarballPlayerStat`.
    """
    nodeId: ID!
  ): CarballPlayerStat

  """Reads a single `CarballReplayMeta` using its globally unique `ID`."""
  carballReplayMetaByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CarballReplayMeta`.
    """
    nodeId: ID!
  ): CarballReplayMeta
}

input RegisterInput {
  username: String
  email: String!
  password: String!
}

type RegisterPayload {
  user: UserAccount!
}

"""All input for the `registerUser` mutation."""
input RegisterUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
  email: String!
  password: String!
}

"""The output of our `registerUser` mutation."""
type RegisterUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
The root subscription type: contains events and live queries you can subscribe to with the `subscription` operation.

#### Live Queries

Live query fields are differentiated by containing `(live)` at the end of their
description, they are added for each field in the `Query` type. When you
subscribe to a live query field, the selection set will be evaluated and sent to
the client, and then most things\* that would cause the output of the selection
set to change will trigger the selection set to be re-evaluated and the results
to be re-sent to the client.

_(\* Not everything: typically only changes to persisted data referenced by the query are detected, not computed fields.)_

Live queries can be very expensive, so try and keep them small and focussed.

#### Events

Event fields will run their selection set when, and only when, the specified
server-side event occurs. This makes them a lot more efficient than Live
Queries, but it is still recommended that you keep payloads fairly small.
"""
type Subscription {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form. (live)
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. (live)
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`. (live)"""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `CarballPlayerStat`. (live)"""
  carballPlayerStatsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CarballPlayerStat`."""
    orderBy: [CarballPlayerStatsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CarballPlayerStatCondition
  ): [CarballPlayerStat!]

  """Reads a set of `CarballReplayMeta`. (live)"""
  carballReplayMetasList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CarballReplayMeta`."""
    orderBy: [CarballReplayMetasOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CarballReplayMetaCondition
  ): [CarballReplayMeta!]

  """ (live)"""
  userAccount(userId: UUID!): UserAccount

  """ (live)"""
  userAccountByUsername(username: String!): UserAccount

  """ (live)"""
  carballPlayerStat(replayId: String!, platformId: String!): CarballPlayerStat

  """ (live)"""
  carballReplayMeta(replayId: String!): CarballReplayMeta

  """ (live)"""
  canAccessSchema(schemarole: String): Boolean

  """ (live)"""
  currentPerson: UserAccount

  """Reads a single `UserAccount` using its globally unique `ID`. (live)"""
  userAccountByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserAccount`.
    """
    nodeId: ID!
  ): UserAccount

  """
  Reads a single `CarballPlayerStat` using its globally unique `ID`. (live)
  """
  carballPlayerStatByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CarballPlayerStat`.
    """
    nodeId: ID!
  ): CarballPlayerStat

  """
  Reads a single `CarballReplayMeta` using its globally unique `ID`. (live)
  """
  carballReplayMetaByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CarballReplayMeta`.
    """
    nodeId: ID!
  ): CarballReplayMeta
}

"""All input for the `updateCarballPlayerStatByNodeId` mutation."""
input UpdateCarballPlayerStatByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarballPlayerStat` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CarballPlayerStat` being updated.
  """
  patch: CarballPlayerStatPatch!
}

"""All input for the `updateCarballPlayerStat` mutation."""
input UpdateCarballPlayerStatInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CarballPlayerStat` being updated.
  """
  patch: CarballPlayerStatPatch!
  replayId: String!
  platformId: String!
}

"""The output of our update `CarballPlayerStat` mutation."""
type UpdateCarballPlayerStatPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CarballPlayerStat` that was updated by this mutation."""
  carballPlayerStat: CarballPlayerStat

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCarballReplayMetaByNodeId` mutation."""
input UpdateCarballReplayMetaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CarballReplayMeta` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CarballReplayMeta` being updated.
  """
  patch: CarballReplayMetaPatch!
}

"""All input for the `updateCarballReplayMeta` mutation."""
input UpdateCarballReplayMetaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CarballReplayMeta` being updated.
  """
  patch: CarballReplayMetaPatch!
  replayId: String!
}

"""The output of our update `CarballReplayMeta` mutation."""
type UpdateCarballReplayMetaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CarballReplayMeta` that was updated by this mutation."""
  carballReplayMeta: CarballReplayMeta

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateUserAccountByNodeId` mutation."""
input UpdateUserAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserAccount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  patch: UserAccountPatch!
}

"""All input for the `updateUserAccountByUsername` mutation."""
input UpdateUserAccountByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  patch: UserAccountPatch!
  username: String!
}

"""All input for the `updateUserAccount` mutation."""
input UpdateUserAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserAccount` being updated.
  """
  patch: UserAccountPatch!

  """A user's unique ID."""
  userId: UUID!
}

"""The output of our update `UserAccount` mutation."""
type UpdateUserAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserAccount` that was updated by this mutation."""
  userAccount: UserAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A user who can log in to the application."""
type UserAccount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """A user's unique ID."""
  userId: UUID!
  username: String
  roles: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""An input for mutations affecting `UserAccount`"""
input UserAccountInput {
  """A user's unique ID."""
  userId: UUID
  username: String
  roles: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""
Represents an update to a `UserAccount`. Fields that are set will be updated.
"""
input UserAccountPatch {
  """A user's unique ID."""
  userId: UUID
  username: String
  roles: [String]
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID
